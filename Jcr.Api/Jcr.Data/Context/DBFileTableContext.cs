// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Jcr.Data
{
    using Jcr.Data;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class DBFileTableContext : CustomDbContext, IDBFileTableContext
    {

        static DBFileTableContext()
        {
            System.Data.Entity.Database.SetInitializer<DBFileTableContext>(null);
            DBFileTableContextStaticPartial(); // Create the following method in your partial class: private static void DBFileTableContextStaticPartial() { }
        }

        public DBFileTableContext()
            : base("Name=FileTableEntities")
        {
            InitializePartial();
        }

        public DBFileTableContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public DBFileTableContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public DBFileTableContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public DBFileTableContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);


            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);

        // Stored Procedures
        public System.Collections.Generic.List<UsmCcmInsertFileReturnModel> UsmCcmInsertFile(string fileName, byte[] fileData, string appCode)
        {
            int procResult;
            return UsmCcmInsertFile(fileName, fileData, appCode, out procResult);
        }

        public System.Collections.Generic.List<UsmCcmInsertFileReturnModel> UsmCcmInsertFile(string fileName, byte[] fileData, string appCode, out int procResult)
        {
            var fileNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FileName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fileName, Size = 510 };
            if (fileNameParam.Value == null)
                fileNameParam.Value = System.DBNull.Value;

            var fileDataParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FileData", SqlDbType = System.Data.SqlDbType.VarBinary, Direction = System.Data.ParameterDirection.Input, Value = fileData, Size = -1 };
            if (fileDataParam.Value == null)
                fileDataParam.Value = System.DBNull.Value;

            var appCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AppCode", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = appCode, Size = 50 };
            if (appCodeParam.Value == null)
                appCodeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UsmCcmInsertFileReturnModel>("EXEC @procResult = [dbo].[usmCCMInsertFile] @FileName, @FileData, @AppCode", fileNameParam, fileDataParam, appCodeParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UsmCcmInsertFileReturnModel>> UsmCcmInsertFileAsync(string fileName, byte[] fileData, string appCode)
        {
            var fileNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FileName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fileName, Size = 510 };
            if (fileNameParam.Value == null)
                fileNameParam.Value = System.DBNull.Value;

            var fileDataParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FileData", SqlDbType = System.Data.SqlDbType.VarBinary, Direction = System.Data.ParameterDirection.Input, Value = fileData, Size = -1 };
            if (fileDataParam.Value == null)
                fileDataParam.Value = System.DBNull.Value;

            var appCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AppCode", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = appCode, Size = 50 };
            if (appCodeParam.Value == null)
                appCodeParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UsmCcmInsertFileReturnModel>("EXEC [dbo].[usmCCMInsertFile] @FileName, @FileData, @AppCode", fileNameParam, fileDataParam, appCodeParam).ToListAsync();

            return procResultData;
        }

        public int UsmMsDeleteFile(System.Guid? fileStreamId)
        {
            var fileStreamIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@fileStreamID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = fileStreamId.GetValueOrDefault() };
            if (!fileStreamId.HasValue)
                fileStreamIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[usmMSDeleteFile] @fileStreamID", fileStreamIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<UsmMsInsertFileReturnModel> UsmMsInsertFile(string filename, byte[] filedata)
        {
            int procResult;
            return UsmMsInsertFile(filename, filedata, out procResult);
        }

        public System.Collections.Generic.List<UsmMsInsertFileReturnModel> UsmMsInsertFile(string filename, byte[] filedata, out int procResult)
        {
            var filenameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@filename", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = filename, Size = 255 };
            if (filenameParam.Value == null)
                filenameParam.Value = System.DBNull.Value;

            var filedataParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@filedata", SqlDbType = System.Data.SqlDbType.VarBinary, Direction = System.Data.ParameterDirection.Input, Value = filedata, Size = -1 };
            if (filedataParam.Value == null)
                filedataParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UsmMsInsertFileReturnModel>("EXEC @procResult = [dbo].[usmMSInsertFile] @filename, @filedata", filenameParam, filedataParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UsmMsInsertFileReturnModel>> UsmMsInsertFileAsync(string filename, byte[] filedata)
        {
            var filenameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@filename", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = filename, Size = 255 };
            if (filenameParam.Value == null)
                filenameParam.Value = System.DBNull.Value;

            var filedataParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@filedata", SqlDbType = System.Data.SqlDbType.VarBinary, Direction = System.Data.ParameterDirection.Input, Value = filedata, Size = -1 };
            if (filedataParam.Value == null)
                filedataParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UsmMsInsertFileReturnModel>("EXEC [dbo].[usmMSInsertFile] @filename, @filedata", filenameParam, filedataParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UsmMsRetrieveFileReturnModel> UsmMsRetrieveFile(System.Guid? fileStreamId)
        {
            int procResult;
            return UsmMsRetrieveFile(fileStreamId, out procResult);
        }

        public System.Collections.Generic.List<UsmMsRetrieveFileReturnModel> UsmMsRetrieveFile(System.Guid? fileStreamId, out int procResult)
        {
            var fileStreamIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@fileStreamID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = fileStreamId.GetValueOrDefault() };
            if (!fileStreamId.HasValue)
                fileStreamIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UsmMsRetrieveFileReturnModel>("EXEC @procResult = [dbo].[usmMSRetrieveFile] @fileStreamID", fileStreamIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UsmMsRetrieveFileReturnModel>> UsmMsRetrieveFileAsync(System.Guid? fileStreamId)
        {
            var fileStreamIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@fileStreamID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = fileStreamId.GetValueOrDefault() };
            if (!fileStreamId.HasValue)
                fileStreamIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UsmMsRetrieveFileReturnModel>("EXEC [dbo].[usmMSRetrieveFile] @fileStreamID", fileStreamIdParam).ToListAsync();

            return procResultData;
        }

    }
}
// </auto-generated>
