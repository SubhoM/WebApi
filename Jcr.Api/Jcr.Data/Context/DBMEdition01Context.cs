// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Jcr.Data
{
    using Jcr.Data;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class DBMEdition01Context : CustomDbContext, IDBMEdition01Context
    {

        static DBMEdition01Context()
        {
            System.Data.Entity.Database.SetInitializer<DBMEdition01Context>(null);
            DBMEdition01ContextStaticPartial(); // Create the following method in your partial class: private static void DBMEdition01ContextStaticPartial() { }
        }

        public DBMEdition01Context()
            : base("Name=DBMEdition01")
        {
            InitializePartial();
        }

        public DBMEdition01Context(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public DBMEdition01Context(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public DBMEdition01Context(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public DBMEdition01Context(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);


            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);

        // Stored Procedures
        public System.Collections.Generic.List<ApiAllChildrenMatchParentReturnModel> ApiAllChildrenMatchParent(int? tracerId)
        {
            int procResult;
            return ApiAllChildrenMatchParent(tracerId, out procResult);
        }

        public System.Collections.Generic.List<ApiAllChildrenMatchParentReturnModel> ApiAllChildrenMatchParent(int? tracerId, out int procResult)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiAllChildrenMatchParentReturnModel>("EXEC @procResult = [dbo].[apiAllChildrenMatchParent] @TracerID", tracerIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiAllChildrenMatchParentReturnModel>> ApiAllChildrenMatchParentAsync(int? tracerId)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiAllChildrenMatchParentReturnModel>("EXEC [dbo].[apiAllChildrenMatchParent] @TracerID", tracerIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiChangeMasterSiteReturnModel> ApiChangeMasterSite(int? tracerId, int? siteId, int? userId)
        {
            int procResult;
            return ApiChangeMasterSite(tracerId, siteId, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiChangeMasterSiteReturnModel> ApiChangeMasterSite(int? tracerId, int? siteId, int? userId, out int procResult)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiChangeMasterSiteReturnModel>("EXEC @procResult = [dbo].[apiChangeMasterSite] @TracerID, @SiteID, @UserID", tracerIdParam, siteIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiChangeMasterSiteReturnModel>> ApiChangeMasterSiteAsync(int? tracerId, int? siteId, int? userId)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiChangeMasterSiteReturnModel>("EXEC [dbo].[apiChangeMasterSite] @TracerID, @SiteID, @UserID", tracerIdParam, siteIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiCreateGuestUserByEmailIdsReturnModel> ApiCreateGuestUserByEmailIds(string lstUserEmailIDs, int? siteId, string firstName, string lastName, string middleName, int? externalUserRoleTypeId, int? updatedById)
        {
            int procResult;
            return ApiCreateGuestUserByEmailIds(lstUserEmailIDs, siteId, firstName, lastName, middleName, externalUserRoleTypeId, updatedById, out procResult);
        }

        public System.Collections.Generic.List<ApiCreateGuestUserByEmailIdsReturnModel> ApiCreateGuestUserByEmailIds(string lstUserEmailIDs, int? siteId, string firstName, string lastName, string middleName, int? externalUserRoleTypeId, int? updatedById, out int procResult)
        {
            var lstUserEmailIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LstUserEmailIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lstUserEmailIDs, Size = -1 };
            if (lstUserEmailIDsParam.Value == null)
                lstUserEmailIDsParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var firstNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FirstName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = firstName, Size = 100 };
            if (firstNameParam.Value == null)
                firstNameParam.Value = System.DBNull.Value;

            var lastNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lastName, Size = 100 };
            if (lastNameParam.Value == null)
                lastNameParam.Value = System.DBNull.Value;

            var middleNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MiddleName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = middleName, Size = 100 };
            if (middleNameParam.Value == null)
                middleNameParam.Value = System.DBNull.Value;

            var externalUserRoleTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ExternalUserRoleTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = externalUserRoleTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!externalUserRoleTypeId.HasValue)
                externalUserRoleTypeIdParam.Value = System.DBNull.Value;

            var updatedByIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedById.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedById.HasValue)
                updatedByIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiCreateGuestUserByEmailIdsReturnModel>("EXEC @procResult = [dbo].[apiCreateGuestUserByEmailIds] @LstUserEmailIDs, @SiteID, @FirstName, @LastName, @MiddleName, @ExternalUserRoleTypeID, @UpdatedByID", lstUserEmailIDsParam, siteIdParam, firstNameParam, lastNameParam, middleNameParam, externalUserRoleTypeIdParam, updatedByIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiCreateGuestUserByEmailIdsReturnModel>> ApiCreateGuestUserByEmailIdsAsync(string lstUserEmailIDs, int? siteId, string firstName, string lastName, string middleName, int? externalUserRoleTypeId, int? updatedById)
        {
            var lstUserEmailIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LstUserEmailIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lstUserEmailIDs, Size = -1 };
            if (lstUserEmailIDsParam.Value == null)
                lstUserEmailIDsParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var firstNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FirstName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = firstName, Size = 100 };
            if (firstNameParam.Value == null)
                firstNameParam.Value = System.DBNull.Value;

            var lastNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lastName, Size = 100 };
            if (lastNameParam.Value == null)
                lastNameParam.Value = System.DBNull.Value;

            var middleNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MiddleName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = middleName, Size = 100 };
            if (middleNameParam.Value == null)
                middleNameParam.Value = System.DBNull.Value;

            var externalUserRoleTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ExternalUserRoleTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = externalUserRoleTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!externalUserRoleTypeId.HasValue)
                externalUserRoleTypeIdParam.Value = System.DBNull.Value;

            var updatedByIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedById.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedById.HasValue)
                updatedByIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiCreateGuestUserByEmailIdsReturnModel>("EXEC [dbo].[apiCreateGuestUserByEmailIds] @LstUserEmailIDs, @SiteID, @FirstName, @LastName, @MiddleName, @ExternalUserRoleTypeID, @UpdatedByID", lstUserEmailIDsParam, siteIdParam, firstNameParam, lastNameParam, middleNameParam, externalUserRoleTypeIdParam, updatedByIdParam).ToListAsync();

            return procResultData;
        }

        public int ApiDeleteTask(string taskId)
        {
            var taskIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = taskId, Size = -1 };
            if (taskIdParam.Value == null)
                taskIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiDeleteTask] @TaskID", taskIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiDeleteTracerCategoryReturnModel> ApiDeleteTracerCategory(int? tracerCategoryId, int? siteId, int? updatedById, int? newTracerCategoryId)
        {
            int procResult;
            return ApiDeleteTracerCategory(tracerCategoryId, siteId, updatedById, newTracerCategoryId, out procResult);
        }

        public System.Collections.Generic.List<ApiDeleteTracerCategoryReturnModel> ApiDeleteTracerCategory(int? tracerCategoryId, int? siteId, int? updatedById, int? newTracerCategoryId, out int procResult)
        {
            var tracerCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCategoryId.HasValue)
                tracerCategoryIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var updatedByIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedById.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedById.HasValue)
                updatedByIdParam.Value = System.DBNull.Value;

            var newTracerCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NewTracerCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = newTracerCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!newTracerCategoryId.HasValue)
                newTracerCategoryIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiDeleteTracerCategoryReturnModel>("EXEC @procResult = [dbo].[apiDeleteTracerCategory] @TracerCategoryID, @SiteID, @UpdatedByID, @NewTracerCategoryID", tracerCategoryIdParam, siteIdParam, updatedByIdParam, newTracerCategoryIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiDeleteTracerCategoryReturnModel>> ApiDeleteTracerCategoryAsync(int? tracerCategoryId, int? siteId, int? updatedById, int? newTracerCategoryId)
        {
            var tracerCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCategoryId.HasValue)
                tracerCategoryIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var updatedByIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedById.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedById.HasValue)
                updatedByIdParam.Value = System.DBNull.Value;

            var newTracerCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NewTracerCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = newTracerCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!newTracerCategoryId.HasValue)
                newTracerCategoryIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiDeleteTracerCategoryReturnModel>("EXEC [dbo].[apiDeleteTracerCategory] @TracerCategoryID, @SiteID, @UpdatedByID, @NewTracerCategoryID", tracerCategoryIdParam, siteIdParam, updatedByIdParam, newTracerCategoryIdParam).ToListAsync();

            return procResultData;
        }

        public int ApiDeleteTracerImageByName(int? tracerCustomId, int? tracerQuestionId, int? tracerResponseId, int? userId, string imageName)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var imageNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ImageName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = imageName, Size = -1 };
            if (imageNameParam.Value == null)
                imageNameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiDeleteTracerImageByName] @TracerCustomID, @TracerQuestionID, @TracerResponseID, @UserID, @ImageName", tracerCustomIdParam, tracerQuestionIdParam, tracerResponseIdParam, userIdParam, imageNameParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiDeleteTracerImagesTemp(int? tracerCustomId, int? userId)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiDeleteTracerImagesTemp] @TracerCustomID, @UserID", tracerCustomIdParam, userIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiDisableTaskNotificationSchedules(int? updateTypeId, int? siteId, int? userId, string taskIDs)
        {
            var updateTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdateTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updateTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updateTypeId.HasValue)
                updateTypeIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var taskIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = taskIDs, Size = -1 };
            if (taskIDsParam.Value == null)
                taskIDsParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiDisableTaskNotificationSchedules] @UpdateTypeID, @SiteID, @UserID, @TaskIDs", updateTypeIdParam, siteIdParam, userIdParam, taskIDsParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiEmailUpdateErReportUserSchedule(int? siteId, bool? sendTaskReport, int? scheduleTypeId, string userTaskRecipients, int? userId, int? updatedUserId, int? taskTypeId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var sendTaskReportParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SendTaskReport", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = sendTaskReport.GetValueOrDefault() };
            if (!sendTaskReport.HasValue)
                sendTaskReportParam.Value = System.DBNull.Value;

            var scheduleTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ScheduleTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = scheduleTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!scheduleTypeId.HasValue)
                scheduleTypeIdParam.Value = System.DBNull.Value;

            var userTaskRecipientsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserTaskRecipients", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userTaskRecipients, Size = -1 };
            if (userTaskRecipientsParam.Value == null)
                userTaskRecipientsParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var updatedUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedUserId.HasValue)
                updatedUserIdParam.Value = System.DBNull.Value;

            var taskTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = taskTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskTypeId.HasValue)
                taskTypeIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiEmailUpdateERReportUserSchedule] @SiteID, @SendTaskReport, @ScheduleTypeID, @UserTaskRecipients, @UserID, @UpdatedUserID, @TaskTypeID", siteIdParam, sendTaskReportParam, scheduleTypeIdParam, userTaskRecipientsParam, userIdParam, updatedUserIdParam, taskTypeIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiGetActiveDeptCountReturnModel> ApiGetActiveDeptCount(int? siteId, int? programId)
        {
            int procResult;
            return ApiGetActiveDeptCount(siteId, programId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetActiveDeptCountReturnModel> ApiGetActiveDeptCount(int? siteId, int? programId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetActiveDeptCountReturnModel>("EXEC @procResult = [dbo].[apiGetActiveDeptCount] @SiteID, @ProgramID", siteIdParam, programIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetActiveDeptCountReturnModel>> ApiGetActiveDeptCountAsync(int? siteId, int? programId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetActiveDeptCountReturnModel>("EXEC [dbo].[apiGetActiveDeptCount] @SiteID, @ProgramID", siteIdParam, programIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetAmpTaskListByEpTextIdReturnModel> ApiGetAmpTaskListByEpTextId(string standardEffDate, int? siteId, int? programId, int? epTextId)
        {
            int procResult;
            return ApiGetAmpTaskListByEpTextId(standardEffDate, siteId, programId, epTextId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetAmpTaskListByEpTextIdReturnModel> ApiGetAmpTaskListByEpTextId(string standardEffDate, int? siteId, int? programId, int? epTextId, out int procResult)
        {
            var standardEffDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = standardEffDate, Size = 10 };
            if (standardEffDateParam.Value == null)
                standardEffDateParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var epTextIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EPTextID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = epTextId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!epTextId.HasValue)
                epTextIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetAmpTaskListByEpTextIdReturnModel>("EXEC @procResult = [dbo].[apiGetAMPTaskListByEPTextID] @StandardEffDate, @SiteID, @ProgramID, @EPTextID", standardEffDateParam, siteIdParam, programIdParam, epTextIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetAmpTaskListByEpTextIdReturnModel>> ApiGetAmpTaskListByEpTextIdAsync(string standardEffDate, int? siteId, int? programId, int? epTextId)
        {
            var standardEffDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = standardEffDate, Size = 10 };
            if (standardEffDateParam.Value == null)
                standardEffDateParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var epTextIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EPTextID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = epTextId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!epTextId.HasValue)
                epTextIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetAmpTaskListByEpTextIdReturnModel>("EXEC [dbo].[apiGetAMPTaskListByEPTextID] @StandardEffDate, @SiteID, @ProgramID, @EPTextID", standardEffDateParam, siteIdParam, programIdParam, epTextIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetCategoryNamesReturnModel> ApiGetCategoryNames(int? siteId, int? programId)
        {
            int procResult;
            return ApiGetCategoryNames(siteId, programId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetCategoryNamesReturnModel> ApiGetCategoryNames(int? siteId, int? programId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetCategoryNamesReturnModel>("EXEC @procResult = [dbo].[apiGetCategoryNames] @SiteID, @ProgramID", siteIdParam, programIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetCategoryNamesReturnModel>> ApiGetCategoryNamesAsync(int? siteId, int? programId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetCategoryNamesReturnModel>("EXEC [dbo].[apiGetCategoryNames] @SiteID, @ProgramID", siteIdParam, programIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetChaptersBySiteAndProgramReturnModel> ApiGetChaptersBySiteAndProgram(int? siteId, int? programId, int? userId, int? certificationItemId, System.DateTime? standardEffBeginDate, int? serviceProfileTypeId)
        {
            int procResult;
            return ApiGetChaptersBySiteAndProgram(siteId, programId, userId, certificationItemId, standardEffBeginDate, serviceProfileTypeId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetChaptersBySiteAndProgramReturnModel> ApiGetChaptersBySiteAndProgram(int? siteId, int? programId, int? userId, int? certificationItemId, System.DateTime? standardEffBeginDate, int? serviceProfileTypeId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var certificationItemIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CertificationItemID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = certificationItemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!certificationItemId.HasValue)
                certificationItemIdParam.Value = System.DBNull.Value;

            var standardEffBeginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffBeginDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = standardEffBeginDate.GetValueOrDefault() };
            if (!standardEffBeginDate.HasValue)
                standardEffBeginDateParam.Value = System.DBNull.Value;

            var serviceProfileTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ServiceProfileTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = serviceProfileTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!serviceProfileTypeId.HasValue)
                serviceProfileTypeIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetChaptersBySiteAndProgramReturnModel>("EXEC @procResult = [dbo].[apiGetChaptersBySiteAndProgram] @SiteID, @ProgramID, @UserID, @CertificationItemID, @StandardEffBeginDate, @ServiceProfileTypeID", siteIdParam, programIdParam, userIdParam, certificationItemIdParam, standardEffBeginDateParam, serviceProfileTypeIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetChaptersBySiteAndProgramReturnModel>> ApiGetChaptersBySiteAndProgramAsync(int? siteId, int? programId, int? userId, int? certificationItemId, System.DateTime? standardEffBeginDate, int? serviceProfileTypeId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var certificationItemIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CertificationItemID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = certificationItemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!certificationItemId.HasValue)
                certificationItemIdParam.Value = System.DBNull.Value;

            var standardEffBeginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffBeginDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = standardEffBeginDate.GetValueOrDefault() };
            if (!standardEffBeginDate.HasValue)
                standardEffBeginDateParam.Value = System.DBNull.Value;

            var serviceProfileTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ServiceProfileTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = serviceProfileTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!serviceProfileTypeId.HasValue)
                serviceProfileTypeIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetChaptersBySiteAndProgramReturnModel>("EXEC [dbo].[apiGetChaptersBySiteAndProgram] @SiteID, @ProgramID, @UserID, @CertificationItemID, @StandardEffBeginDate, @ServiceProfileTypeID", siteIdParam, programIdParam, userIdParam, certificationItemIdParam, standardEffBeginDateParam, serviceProfileTypeIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetChapterStandardByEpTextIdReturnModel> ApiGetChapterStandardByEpTextId(string standardEffBeginDate, int? epTextId, int? programId)
        {
            int procResult;
            return ApiGetChapterStandardByEpTextId(standardEffBeginDate, epTextId, programId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetChapterStandardByEpTextIdReturnModel> ApiGetChapterStandardByEpTextId(string standardEffBeginDate, int? epTextId, int? programId, out int procResult)
        {
            var standardEffBeginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffBeginDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = standardEffBeginDate, Size = 10 };
            if (standardEffBeginDateParam.Value == null)
                standardEffBeginDateParam.Value = System.DBNull.Value;

            var epTextIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EPTextID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = epTextId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!epTextId.HasValue)
                epTextIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetChapterStandardByEpTextIdReturnModel>("EXEC @procResult = [dbo].[apiGetChapterStandardByEpTextID] @StandardEffBeginDate, @EPTextID, @ProgramID", standardEffBeginDateParam, epTextIdParam, programIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetChapterStandardByEpTextIdReturnModel>> ApiGetChapterStandardByEpTextIdAsync(string standardEffBeginDate, int? epTextId, int? programId)
        {
            var standardEffBeginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffBeginDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = standardEffBeginDate, Size = 10 };
            if (standardEffBeginDateParam.Value == null)
                standardEffBeginDateParam.Value = System.DBNull.Value;

            var epTextIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EPTextID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = epTextId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!epTextId.HasValue)
                epTextIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetChapterStandardByEpTextIdReturnModel>("EXEC [dbo].[apiGetChapterStandardByEpTextID] @StandardEffBeginDate, @EPTextID, @ProgramID", standardEffBeginDateParam, epTextIdParam, programIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetCmsTaskListByCmsStandardIdReturnModel> ApiGetCmsTaskListByCmsStandardId(string standardEffDate, int? siteId, int? programId, int? cmsStandardId)
        {
            int procResult;
            return ApiGetCmsTaskListByCmsStandardId(standardEffDate, siteId, programId, cmsStandardId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetCmsTaskListByCmsStandardIdReturnModel> ApiGetCmsTaskListByCmsStandardId(string standardEffDate, int? siteId, int? programId, int? cmsStandardId, out int procResult)
        {
            var standardEffDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = standardEffDate, Size = 10 };
            if (standardEffDateParam.Value == null)
                standardEffDateParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var cmsStandardIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CMSStandardID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = cmsStandardId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!cmsStandardId.HasValue)
                cmsStandardIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetCmsTaskListByCmsStandardIdReturnModel>("EXEC @procResult = [dbo].[apiGetCMSTaskListByCMSStandardID] @StandardEffDate, @SiteID, @ProgramID, @CMSStandardID", standardEffDateParam, siteIdParam, programIdParam, cmsStandardIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetCmsTaskListByCmsStandardIdReturnModel>> ApiGetCmsTaskListByCmsStandardIdAsync(string standardEffDate, int? siteId, int? programId, int? cmsStandardId)
        {
            var standardEffDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = standardEffDate, Size = 10 };
            if (standardEffDateParam.Value == null)
                standardEffDateParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var cmsStandardIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CMSStandardID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = cmsStandardId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!cmsStandardId.HasValue)
                cmsStandardIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetCmsTaskListByCmsStandardIdReturnModel>("EXEC [dbo].[apiGetCMSTaskListByCMSStandardID] @StandardEffDate, @SiteID, @ProgramID, @CMSStandardID", standardEffDateParam, siteIdParam, programIdParam, cmsStandardIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetCopDataReturnModel> ApiGetCopData(int? siteId, int? programId)
        {
            int procResult;
            return ApiGetCopData(siteId, programId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetCopDataReturnModel> ApiGetCopData(int? siteId, int? programId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetCopDataReturnModel>("EXEC @procResult = [dbo].[apiGetCopData] @SiteID, @ProgramID", siteIdParam, programIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetCopDataReturnModel>> ApiGetCopDataAsync(int? siteId, int? programId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetCopDataReturnModel>("EXEC [dbo].[apiGetCopData] @SiteID, @ProgramID", siteIdParam, programIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetCopTagByCmsStandardIdReturnModel> ApiGetCopTagByCmsStandardId(int? programId, int? cmsStandardId)
        {
            int procResult;
            return ApiGetCopTagByCmsStandardId(programId, cmsStandardId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetCopTagByCmsStandardIdReturnModel> ApiGetCopTagByCmsStandardId(int? programId, int? cmsStandardId, out int procResult)
        {
            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var cmsStandardIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CmsStandardID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = cmsStandardId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!cmsStandardId.HasValue)
                cmsStandardIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetCopTagByCmsStandardIdReturnModel>("EXEC @procResult = [dbo].[apiGetCopTagByCMSStandardID] @ProgramID, @CmsStandardID", programIdParam, cmsStandardIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetCopTagByCmsStandardIdReturnModel>> ApiGetCopTagByCmsStandardIdAsync(int? programId, int? cmsStandardId)
        {
            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var cmsStandardIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CmsStandardID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = cmsStandardId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!cmsStandardId.HasValue)
                cmsStandardIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetCopTagByCmsStandardIdReturnModel>("EXEC [dbo].[apiGetCopTagByCMSStandardID] @ProgramID, @CmsStandardID", programIdParam, cmsStandardIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetDepartmentHierarchyByRankIdReturnModel> ApiGetDepartmentHierarchyByRankId(int? siteId, int? programId, int? rankId, bool? isCategoryActive, bool? isCategoryItemActive)
        {
            int procResult;
            return ApiGetDepartmentHierarchyByRankId(siteId, programId, rankId, isCategoryActive, isCategoryItemActive, out procResult);
        }

        public System.Collections.Generic.List<ApiGetDepartmentHierarchyByRankIdReturnModel> ApiGetDepartmentHierarchyByRankId(int? siteId, int? programId, int? rankId, bool? isCategoryActive, bool? isCategoryItemActive, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var rankIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RankID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = rankId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rankId.HasValue)
                rankIdParam.Value = System.DBNull.Value;

            var isCategoryActiveParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsCategoryActive", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isCategoryActive.GetValueOrDefault() };
            if (!isCategoryActive.HasValue)
                isCategoryActiveParam.Value = System.DBNull.Value;

            var isCategoryItemActiveParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsCategoryItemActive", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isCategoryItemActive.GetValueOrDefault() };
            if (!isCategoryItemActive.HasValue)
                isCategoryItemActiveParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetDepartmentHierarchyByRankIdReturnModel>("EXEC @procResult = [dbo].[apiGetDepartmentHierarchyByRankID] @SiteID, @ProgramID, @RankID, @IsCategoryActive, @IsCategoryItemActive", siteIdParam, programIdParam, rankIdParam, isCategoryActiveParam, isCategoryItemActiveParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetDepartmentHierarchyByRankIdReturnModel>> ApiGetDepartmentHierarchyByRankIdAsync(int? siteId, int? programId, int? rankId, bool? isCategoryActive, bool? isCategoryItemActive)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var rankIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RankID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = rankId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rankId.HasValue)
                rankIdParam.Value = System.DBNull.Value;

            var isCategoryActiveParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsCategoryActive", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isCategoryActive.GetValueOrDefault() };
            if (!isCategoryActive.HasValue)
                isCategoryActiveParam.Value = System.DBNull.Value;

            var isCategoryItemActiveParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsCategoryItemActive", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isCategoryItemActive.GetValueOrDefault() };
            if (!isCategoryItemActive.HasValue)
                isCategoryItemActiveParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetDepartmentHierarchyByRankIdReturnModel>("EXEC [dbo].[apiGetDepartmentHierarchyByRankID] @SiteID, @ProgramID, @RankID, @IsCategoryActive, @IsCategoryItemActive", siteIdParam, programIdParam, rankIdParam, isCategoryActiveParam, isCategoryItemActiveParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetElementsByTagReturnModel> ApiGetElementsByTag(int? programId, string tagCode)
        {
            int procResult;
            return ApiGetElementsByTag(programId, tagCode, out procResult);
        }

        public System.Collections.Generic.List<ApiGetElementsByTagReturnModel> ApiGetElementsByTag(int? programId, string tagCode, out int procResult)
        {
            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var tagCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TagCode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = tagCode, Size = 10 };
            if (tagCodeParam.Value == null)
                tagCodeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetElementsByTagReturnModel>("EXEC @procResult = [dbo].[apiGetElementsByTag] @ProgramID, @TagCode", programIdParam, tagCodeParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetElementsByTagReturnModel>> ApiGetElementsByTagAsync(int? programId, string tagCode)
        {
            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var tagCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TagCode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = tagCode, Size = 10 };
            if (tagCodeParam.Value == null)
                tagCodeParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetElementsByTagReturnModel>("EXEC [dbo].[apiGetElementsByTag] @ProgramID, @TagCode", programIdParam, tagCodeParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetEPsByStandardReturnModel> ApiGetEPsByStandard(int? userId, int? productType, int? siteId, int? programId, int? standardTextId, System.DateTime? standardEffBeginDate, int? serviceProfileTypeId, int? certificationItemId)
        {
            int procResult;
            return ApiGetEPsByStandard(userId, productType, siteId, programId, standardTextId, standardEffBeginDate, serviceProfileTypeId, certificationItemId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetEPsByStandardReturnModel> ApiGetEPsByStandard(int? userId, int? productType, int? siteId, int? programId, int? standardTextId, System.DateTime? standardEffBeginDate, int? serviceProfileTypeId, int? certificationItemId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var productTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductType", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productType.HasValue)
                productTypeParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var standardTextIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardTextID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = standardTextId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!standardTextId.HasValue)
                standardTextIdParam.Value = System.DBNull.Value;

            var standardEffBeginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffBeginDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = standardEffBeginDate.GetValueOrDefault() };
            if (!standardEffBeginDate.HasValue)
                standardEffBeginDateParam.Value = System.DBNull.Value;

            var serviceProfileTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ServiceProfileTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = serviceProfileTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!serviceProfileTypeId.HasValue)
                serviceProfileTypeIdParam.Value = System.DBNull.Value;

            var certificationItemIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CertificationItemID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = certificationItemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!certificationItemId.HasValue)
                certificationItemIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetEPsByStandardReturnModel>("EXEC @procResult = [dbo].[apiGetEPsByStandard] @UserID, @ProductType, @SiteID, @ProgramID, @StandardTextID, @StandardEffBeginDate, @ServiceProfileTypeID, @CertificationItemID", userIdParam, productTypeParam, siteIdParam, programIdParam, standardTextIdParam, standardEffBeginDateParam, serviceProfileTypeIdParam, certificationItemIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetEPsByStandardReturnModel>> ApiGetEPsByStandardAsync(int? userId, int? productType, int? siteId, int? programId, int? standardTextId, System.DateTime? standardEffBeginDate, int? serviceProfileTypeId, int? certificationItemId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var productTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductType", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productType.HasValue)
                productTypeParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var standardTextIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardTextID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = standardTextId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!standardTextId.HasValue)
                standardTextIdParam.Value = System.DBNull.Value;

            var standardEffBeginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffBeginDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = standardEffBeginDate.GetValueOrDefault() };
            if (!standardEffBeginDate.HasValue)
                standardEffBeginDateParam.Value = System.DBNull.Value;

            var serviceProfileTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ServiceProfileTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = serviceProfileTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!serviceProfileTypeId.HasValue)
                serviceProfileTypeIdParam.Value = System.DBNull.Value;

            var certificationItemIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CertificationItemID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = certificationItemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!certificationItemId.HasValue)
                certificationItemIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetEPsByStandardReturnModel>("EXEC [dbo].[apiGetEPsByStandard] @UserID, @ProductType, @SiteID, @ProgramID, @StandardTextID, @StandardEffBeginDate, @ServiceProfileTypeID, @CertificationItemID", userIdParam, productTypeParam, siteIdParam, programIdParam, standardTextIdParam, standardEffBeginDateParam, serviceProfileTypeIdParam, certificationItemIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetFileStreamIDbyFileDisplayNameReturnModel> ApiGetFileStreamIDbyFileDisplayName(string fileDisplayText)
        {
            int procResult;
            return ApiGetFileStreamIDbyFileDisplayName(fileDisplayText, out procResult);
        }

        public System.Collections.Generic.List<ApiGetFileStreamIDbyFileDisplayNameReturnModel> ApiGetFileStreamIDbyFileDisplayName(string fileDisplayText, out int procResult)
        {
            var fileDisplayTextParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FileDisplayText", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = fileDisplayText, Size = 255 };
            if (fileDisplayTextParam.Value == null)
                fileDisplayTextParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetFileStreamIDbyFileDisplayNameReturnModel>("EXEC @procResult = [dbo].[apiGetFileStreamIDbyFileDisplayName] @FileDisplayText", fileDisplayTextParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetFileStreamIDbyFileDisplayNameReturnModel>> ApiGetFileStreamIDbyFileDisplayNameAsync(string fileDisplayText)
        {
            var fileDisplayTextParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FileDisplayText", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = fileDisplayText, Size = 255 };
            if (fileDisplayTextParam.Value == null)
                fileDisplayTextParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetFileStreamIDbyFileDisplayNameReturnModel>("EXEC [dbo].[apiGetFileStreamIDbyFileDisplayName] @FileDisplayText", fileDisplayTextParam).ToListAsync();

            return procResultData;
        }

        public int ApiGetLabelForUnassigned(out string labelOfTheDay)
        {
            var labelOfTheDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LabelOfTheDay", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Output, Size = 100 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiGetLabelForUnassigned] @LabelOfTheDay OUTPUT", labelOfTheDayParam, procResultParam);
            if (IsSqlParameterNull(labelOfTheDayParam))
                labelOfTheDay = default(string);
            else
                labelOfTheDay = (string) labelOfTheDayParam.Value;

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiGetLicenseDetailsForGuestLinkReturnModel> ApiGetLicenseDetailsForGuestLink(int? guestLinkId)
        {
            int procResult;
            return ApiGetLicenseDetailsForGuestLink(guestLinkId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetLicenseDetailsForGuestLinkReturnModel> ApiGetLicenseDetailsForGuestLink(int? guestLinkId, out int procResult)
        {
            var guestLinkIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@GuestLinkID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = guestLinkId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!guestLinkId.HasValue)
                guestLinkIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetLicenseDetailsForGuestLinkReturnModel>("EXEC @procResult = [dbo].[apiGetLicenseDetailsForGuestLink] @GuestLinkID", guestLinkIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetLicenseDetailsForGuestLinkReturnModel>> ApiGetLicenseDetailsForGuestLinkAsync(int? guestLinkId)
        {
            var guestLinkIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@GuestLinkID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = guestLinkId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!guestLinkId.HasValue)
                guestLinkIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetLicenseDetailsForGuestLinkReturnModel>("EXEC [dbo].[apiGetLicenseDetailsForGuestLink] @GuestLinkID", guestLinkIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetMaxTaskAssignedDateReturnModel> ApiGetMaxTaskAssignedDate(string lstTaskIDs)
        {
            int procResult;
            return ApiGetMaxTaskAssignedDate(lstTaskIDs, out procResult);
        }

        public System.Collections.Generic.List<ApiGetMaxTaskAssignedDateReturnModel> ApiGetMaxTaskAssignedDate(string lstTaskIDs, out int procResult)
        {
            var lstTaskIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LstTaskIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lstTaskIDs, Size = -1 };
            if (lstTaskIDsParam.Value == null)
                lstTaskIDsParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetMaxTaskAssignedDateReturnModel>("EXEC @procResult = [dbo].[apiGetMaxTaskAssignedDate] @LstTaskIDs", lstTaskIDsParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetMaxTaskAssignedDateReturnModel>> ApiGetMaxTaskAssignedDateAsync(string lstTaskIDs)
        {
            var lstTaskIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LstTaskIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lstTaskIDs, Size = -1 };
            if (lstTaskIDsParam.Value == null)
                lstTaskIDsParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetMaxTaskAssignedDateReturnModel>("EXEC [dbo].[apiGetMaxTaskAssignedDate] @LstTaskIDs", lstTaskIDsParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetMobileTracerHeaderReturnModel> ApiGetMobileTracerHeader(int? tracerCustomId, int? tracerResponseId, int? siteId, int? programId)
        {
            int procResult;
            return ApiGetMobileTracerHeader(tracerCustomId, tracerResponseId, siteId, programId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetMobileTracerHeaderReturnModel> ApiGetMobileTracerHeader(int? tracerCustomId, int? tracerResponseId, int? siteId, int? programId, out int procResult)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetMobileTracerHeaderReturnModel>("EXEC @procResult = [dbo].[apiGetMobileTracerHeader] @TracerCustomID, @TracerResponseID, @SiteID, @ProgramID", tracerCustomIdParam, tracerResponseIdParam, siteIdParam, programIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetMobileTracerHeaderReturnModel>> ApiGetMobileTracerHeaderAsync(int? tracerCustomId, int? tracerResponseId, int? siteId, int? programId)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetMobileTracerHeaderReturnModel>("EXEC [dbo].[apiGetMobileTracerHeader] @TracerCustomID, @TracerResponseID, @SiteID, @ProgramID", tracerCustomIdParam, tracerResponseIdParam, siteIdParam, programIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetParentDetailsForLockedTracerCategoryReturnModel> ApiGetParentDetailsForLockedTracerCategory(int? tracerCategoryId)
        {
            int procResult;
            return ApiGetParentDetailsForLockedTracerCategory(tracerCategoryId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetParentDetailsForLockedTracerCategoryReturnModel> ApiGetParentDetailsForLockedTracerCategory(int? tracerCategoryId, out int procResult)
        {
            var tracerCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCategoryId.HasValue)
                tracerCategoryIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetParentDetailsForLockedTracerCategoryReturnModel>("EXEC @procResult = [dbo].[apiGetParentDetailsForLockedTracerCategory] @TracerCategoryID", tracerCategoryIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetParentDetailsForLockedTracerCategoryReturnModel>> ApiGetParentDetailsForLockedTracerCategoryAsync(int? tracerCategoryId)
        {
            var tracerCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCategoryId.HasValue)
                tracerCategoryIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetParentDetailsForLockedTracerCategoryReturnModel>("EXEC [dbo].[apiGetParentDetailsForLockedTracerCategory] @TracerCategoryID", tracerCategoryIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetPasswordResetIntervalReturnModel> ApiGetPasswordResetInterval(int? userId)
        {
            int procResult;
            return ApiGetPasswordResetInterval(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetPasswordResetIntervalReturnModel> ApiGetPasswordResetInterval(int? userId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetPasswordResetIntervalReturnModel>("EXEC @procResult = [dbo].[apiGetPasswordResetInterval] @UserID", userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetPasswordResetIntervalReturnModel>> ApiGetPasswordResetIntervalAsync(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetPasswordResetIntervalReturnModel>("EXEC [dbo].[apiGetPasswordResetInterval] @UserID", userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetProgramsBySiteReturnModel> ApiGetProgramsBySite(int? siteId)
        {
            int procResult;
            return ApiGetProgramsBySite(siteId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetProgramsBySiteReturnModel> ApiGetProgramsBySite(int? siteId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetProgramsBySiteReturnModel>("EXEC @procResult = [dbo].[apiGetProgramsBySite] @SiteID", siteIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetProgramsBySiteReturnModel>> ApiGetProgramsBySiteAsync(int? siteId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetProgramsBySiteReturnModel>("EXEC [dbo].[apiGetProgramsBySite] @SiteID", siteIdParam).ToListAsync();

            return procResultData;
        }

        public ApiGetQuestionAnswerImagesReturnModel ApiGetQuestionAnswerImages(int? tracerQuestionId, int? tracerResponseId, int? userId)
        {
            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiGetQuestionAnswerImagesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiGetQuestionAnswerImages]";
            cmd.Parameters.Add(tracerQuestionIdParam);
            cmd.Parameters.Add(tracerResponseIdParam);
            cmd.Parameters.Add(userIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiGetQuestionAnswerImagesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ApiGetQuestionAnswerImagesReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<ApiGetQuestionAnswerImagesReturnModel> ApiGetQuestionAnswerImagesAsync(int? tracerQuestionId, int? tracerResponseId, int? userId)
        {
            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiGetQuestionAnswerImagesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiGetQuestionAnswerImages]";
            cmd.Parameters.Add(tracerQuestionIdParam);
            cmd.Parameters.Add(tracerResponseIdParam);
            cmd.Parameters.Add(userIdParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiGetQuestionAnswerImagesReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<ApiGetQuestionAnswerImagesReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetSiteEmailNotificationSettingsReturnModel> ApiGetSiteEmailNotificationSettings(int? siteId)
        {
            int procResult;
            return ApiGetSiteEmailNotificationSettings(siteId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetSiteEmailNotificationSettingsReturnModel> ApiGetSiteEmailNotificationSettings(int? siteId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetSiteEmailNotificationSettingsReturnModel>("EXEC @procResult = [dbo].[apiGetSiteEmailNotificationSettings] @SiteID", siteIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetSiteEmailNotificationSettingsReturnModel>> ApiGetSiteEmailNotificationSettingsAsync(int? siteId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetSiteEmailNotificationSettingsReturnModel>("EXEC [dbo].[apiGetSiteEmailNotificationSettings] @SiteID", siteIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetStandardsByChapterReturnModel> ApiGetStandardsByChapter(string standardEffBeginDate, int? productType, int? programId, int? chapterId, int? siteId, int? userId, int? serviceProfileTypeId, int? certificationItemId)
        {
            int procResult;
            return ApiGetStandardsByChapter(standardEffBeginDate, productType, programId, chapterId, siteId, userId, serviceProfileTypeId, certificationItemId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetStandardsByChapterReturnModel> ApiGetStandardsByChapter(string standardEffBeginDate, int? productType, int? programId, int? chapterId, int? siteId, int? userId, int? serviceProfileTypeId, int? certificationItemId, out int procResult)
        {
            var standardEffBeginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffBeginDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = standardEffBeginDate, Size = 10 };
            if (standardEffBeginDateParam.Value == null)
                standardEffBeginDateParam.Value = System.DBNull.Value;

            var productTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductType", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productType.HasValue)
                productTypeParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var chapterIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ChapterID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = chapterId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!chapterId.HasValue)
                chapterIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var serviceProfileTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ServiceProfileTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = serviceProfileTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!serviceProfileTypeId.HasValue)
                serviceProfileTypeIdParam.Value = System.DBNull.Value;

            var certificationItemIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CertificationItemID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = certificationItemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!certificationItemId.HasValue)
                certificationItemIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetStandardsByChapterReturnModel>("EXEC @procResult = [dbo].[apiGetStandardsByChapter] @StandardEffBeginDate, @ProductType, @ProgramID, @ChapterID, @SiteID, @UserID, @ServiceProfileTypeID, @CertificationItemID", standardEffBeginDateParam, productTypeParam, programIdParam, chapterIdParam, siteIdParam, userIdParam, serviceProfileTypeIdParam, certificationItemIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetStandardsByChapterReturnModel>> ApiGetStandardsByChapterAsync(string standardEffBeginDate, int? productType, int? programId, int? chapterId, int? siteId, int? userId, int? serviceProfileTypeId, int? certificationItemId)
        {
            var standardEffBeginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffBeginDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = standardEffBeginDate, Size = 10 };
            if (standardEffBeginDateParam.Value == null)
                standardEffBeginDateParam.Value = System.DBNull.Value;

            var productTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductType", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productType.HasValue)
                productTypeParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var chapterIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ChapterID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = chapterId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!chapterId.HasValue)
                chapterIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var serviceProfileTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ServiceProfileTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = serviceProfileTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!serviceProfileTypeId.HasValue)
                serviceProfileTypeIdParam.Value = System.DBNull.Value;

            var certificationItemIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CertificationItemID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = certificationItemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!certificationItemId.HasValue)
                certificationItemIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetStandardsByChapterReturnModel>("EXEC [dbo].[apiGetStandardsByChapter] @StandardEffBeginDate, @ProductType, @ProgramID, @ChapterID, @SiteID, @UserID, @ServiceProfileTypeID, @CertificationItemID", standardEffBeginDateParam, productTypeParam, programIdParam, chapterIdParam, siteIdParam, userIdParam, serviceProfileTypeIdParam, certificationItemIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetStdDetailsByTracerQuestionReturnModel> ApiGetStdDetailsByTracerQuestion(int? tracerCustomId, int? tracerResponseId, int? tracerQuestionId, bool? isGuestAccess)
        {
            int procResult;
            return ApiGetStdDetailsByTracerQuestion(tracerCustomId, tracerResponseId, tracerQuestionId, isGuestAccess, out procResult);
        }

        public System.Collections.Generic.List<ApiGetStdDetailsByTracerQuestionReturnModel> ApiGetStdDetailsByTracerQuestion(int? tracerCustomId, int? tracerResponseId, int? tracerQuestionId, bool? isGuestAccess, out int procResult)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var isGuestAccessParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsGuestAccess", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isGuestAccess.GetValueOrDefault() };
            if (!isGuestAccess.HasValue)
                isGuestAccessParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetStdDetailsByTracerQuestionReturnModel>("EXEC @procResult = [dbo].[apiGetStdDetailsByTracerQuestion] @TracerCustomID, @TracerResponseID, @TracerQuestionID, @IsGuestAccess", tracerCustomIdParam, tracerResponseIdParam, tracerQuestionIdParam, isGuestAccessParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetStdDetailsByTracerQuestionReturnModel>> ApiGetStdDetailsByTracerQuestionAsync(int? tracerCustomId, int? tracerResponseId, int? tracerQuestionId, bool? isGuestAccess)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var isGuestAccessParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsGuestAccess", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isGuestAccess.GetValueOrDefault() };
            if (!isGuestAccess.HasValue)
                isGuestAccessParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetStdDetailsByTracerQuestionReturnModel>("EXEC [dbo].[apiGetStdDetailsByTracerQuestion] @TracerCustomID, @TracerResponseID, @TracerQuestionID, @IsGuestAccess", tracerCustomIdParam, tracerResponseIdParam, tracerQuestionIdParam, isGuestAccessParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetSystemTracerInfoReturnModel> ApiGetSystemTracerInfo(int? tracerId, int? userId)
        {
            int procResult;
            return ApiGetSystemTracerInfo(tracerId, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetSystemTracerInfoReturnModel> ApiGetSystemTracerInfo(int? tracerId, int? userId, out int procResult)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetSystemTracerInfoReturnModel>("EXEC @procResult = [dbo].[apiGetSystemTracerInfo] @TracerID, @UserID", tracerIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetSystemTracerInfoReturnModel>> ApiGetSystemTracerInfoAsync(int? tracerId, int? userId)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetSystemTracerInfoReturnModel>("EXEC [dbo].[apiGetSystemTracerInfo] @TracerID, @UserID", tracerIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTagsByCoPReturnModel> ApiGetTagsByCoP(int? programId, string copName)
        {
            int procResult;
            return ApiGetTagsByCoP(programId, copName, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTagsByCoPReturnModel> ApiGetTagsByCoP(int? programId, string copName, out int procResult)
        {
            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var copNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CopName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = copName, Size = 50 };
            if (copNameParam.Value == null)
                copNameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTagsByCoPReturnModel>("EXEC @procResult = [dbo].[apiGetTagsByCoP] @ProgramID, @CopName", programIdParam, copNameParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTagsByCoPReturnModel>> ApiGetTagsByCoPAsync(int? programId, string copName)
        {
            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var copNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CopName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = copName, Size = 50 };
            if (copNameParam.Value == null)
                copNameParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTagsByCoPReturnModel>("EXEC [dbo].[apiGetTagsByCoP] @ProgramID, @CopName", programIdParam, copNameParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTargetSitesForCopyReturnModel> ApiGetTargetSitesForCopy(int? tracerCustomId, int? userId)
        {
            int procResult;
            return ApiGetTargetSitesForCopy(tracerCustomId, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTargetSitesForCopyReturnModel> ApiGetTargetSitesForCopy(int? tracerCustomId, int? userId, out int procResult)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTargetSitesForCopyReturnModel>("EXEC @procResult = [dbo].[apiGetTargetSitesForCopy] @TracerCustomID, @UserID", tracerCustomIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTargetSitesForCopyReturnModel>> ApiGetTargetSitesForCopyAsync(int? tracerCustomId, int? userId)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTargetSitesForCopyReturnModel>("EXEC [dbo].[apiGetTargetSitesForCopy] @TracerCustomID, @UserID", tracerCustomIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTargetSitesForDeleteReturnModel> ApiGetTargetSitesForDelete(int? tracerCustomId, int? userId)
        {
            int procResult;
            return ApiGetTargetSitesForDelete(tracerCustomId, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTargetSitesForDeleteReturnModel> ApiGetTargetSitesForDelete(int? tracerCustomId, int? userId, out int procResult)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTargetSitesForDeleteReturnModel>("EXEC @procResult = [dbo].[apiGetTargetSitesForDelete] @TracerCustomID, @UserID", tracerCustomIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTargetSitesForDeleteReturnModel>> ApiGetTargetSitesForDeleteAsync(int? tracerCustomId, int? userId)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTargetSitesForDeleteReturnModel>("EXEC [dbo].[apiGetTargetSitesForDelete] @TracerCustomID, @UserID", tracerCustomIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTaskDetailsReturnModel> ApiGetTaskDetails(int? taskId, System.DateTime? standardEffDate, int? programId)
        {
            int procResult;
            return ApiGetTaskDetails(taskId, standardEffDate, programId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTaskDetailsReturnModel> ApiGetTaskDetails(int? taskId, System.DateTime? standardEffDate, int? programId, out int procResult)
        {
            var taskIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = taskId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskId.HasValue)
                taskIdParam.Value = System.DBNull.Value;

            var standardEffDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = standardEffDate.GetValueOrDefault() };
            if (!standardEffDate.HasValue)
                standardEffDateParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTaskDetailsReturnModel>("EXEC @procResult = [dbo].[apiGetTaskDetails] @TaskID, @StandardEffDate, @ProgramID", taskIdParam, standardEffDateParam, programIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTaskDetailsReturnModel>> ApiGetTaskDetailsAsync(int? taskId, System.DateTime? standardEffDate, int? programId)
        {
            var taskIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = taskId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskId.HasValue)
                taskIdParam.Value = System.DBNull.Value;

            var standardEffDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = standardEffDate.GetValueOrDefault() };
            if (!standardEffDate.HasValue)
                standardEffDateParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTaskDetailsReturnModel>("EXEC [dbo].[apiGetTaskDetails] @TaskID, @StandardEffDate, @ProgramID", taskIdParam, standardEffDateParam, programIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTaskDetailsForSendingEmailReturnModel> ApiGetTaskDetailsForSendingEmail(string taskIDs, int? siteId, int? programId, int? userId, string tracersTaskUrl, bool? skipItemAssociated)
        {
            int procResult;
            return ApiGetTaskDetailsForSendingEmail(taskIDs, siteId, programId, userId, tracersTaskUrl, skipItemAssociated, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTaskDetailsForSendingEmailReturnModel> ApiGetTaskDetailsForSendingEmail(string taskIDs, int? siteId, int? programId, int? userId, string tracersTaskUrl, bool? skipItemAssociated, out int procResult)
        {
            var taskIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = taskIDs, Size = -1 };
            if (taskIDsParam.Value == null)
                taskIDsParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var tracersTaskUrlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracersTaskUrl", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = tracersTaskUrl, Size = 2000 };
            if (tracersTaskUrlParam.Value == null)
                tracersTaskUrlParam.Value = System.DBNull.Value;

            var skipItemAssociatedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SkipItemAssociated", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = skipItemAssociated.GetValueOrDefault() };
            if (!skipItemAssociated.HasValue)
                skipItemAssociatedParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTaskDetailsForSendingEmailReturnModel>("EXEC @procResult = [dbo].[apiGetTaskDetailsForSendingEmail] @TaskIDs, @SiteID, @ProgramID, @UserID, @TracersTaskUrl, @SkipItemAssociated", taskIDsParam, siteIdParam, programIdParam, userIdParam, tracersTaskUrlParam, skipItemAssociatedParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTaskDetailsForSendingEmailReturnModel>> ApiGetTaskDetailsForSendingEmailAsync(string taskIDs, int? siteId, int? programId, int? userId, string tracersTaskUrl, bool? skipItemAssociated)
        {
            var taskIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = taskIDs, Size = -1 };
            if (taskIDsParam.Value == null)
                taskIDsParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var tracersTaskUrlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracersTaskUrl", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = tracersTaskUrl, Size = 2000 };
            if (tracersTaskUrlParam.Value == null)
                tracersTaskUrlParam.Value = System.DBNull.Value;

            var skipItemAssociatedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SkipItemAssociated", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = skipItemAssociated.GetValueOrDefault() };
            if (!skipItemAssociated.HasValue)
                skipItemAssociatedParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTaskDetailsForSendingEmailReturnModel>("EXEC [dbo].[apiGetTaskDetailsForSendingEmail] @TaskIDs, @SiteID, @ProgramID, @UserID, @TracersTaskUrl, @SkipItemAssociated", taskIDsParam, siteIdParam, programIdParam, userIdParam, tracersTaskUrlParam, skipItemAssociatedParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTaskFollowUpRemainderSettingsReturnModel> ApiGetTaskFollowUpRemainderSettings(int? siteId)
        {
            int procResult;
            return ApiGetTaskFollowUpRemainderSettings(siteId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTaskFollowUpRemainderSettingsReturnModel> ApiGetTaskFollowUpRemainderSettings(int? siteId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTaskFollowUpRemainderSettingsReturnModel>("EXEC @procResult = [dbo].[apiGetTaskFollowUpRemainderSettings] @SiteID", siteIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTaskFollowUpRemainderSettingsReturnModel>> ApiGetTaskFollowUpRemainderSettingsAsync(int? siteId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTaskFollowUpRemainderSettingsReturnModel>("EXEC [dbo].[apiGetTaskFollowUpRemainderSettings] @SiteID", siteIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTaskLinkDetailsReturnModel> ApiGetTaskLinkDetails(System.Guid? taskLinkGuid)
        {
            int procResult;
            return ApiGetTaskLinkDetails(taskLinkGuid, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTaskLinkDetailsReturnModel> ApiGetTaskLinkDetails(System.Guid? taskLinkGuid, out int procResult)
        {
            var taskLinkGuidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskLinkGUID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = taskLinkGuid.GetValueOrDefault() };
            if (!taskLinkGuid.HasValue)
                taskLinkGuidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTaskLinkDetailsReturnModel>("EXEC @procResult = [dbo].[apiGetTaskLinkDetails] @TaskLinkGUID", taskLinkGuidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTaskLinkDetailsReturnModel>> ApiGetTaskLinkDetailsAsync(System.Guid? taskLinkGuid)
        {
            var taskLinkGuidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskLinkGUID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = taskLinkGuid.GetValueOrDefault() };
            if (!taskLinkGuid.HasValue)
                taskLinkGuidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTaskLinkDetailsReturnModel>("EXEC [dbo].[apiGetTaskLinkDetails] @TaskLinkGUID", taskLinkGuidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTaskListReturnModel> ApiGetTaskList(string standardEffDate, int? siteId, int? programId, int? assignedToUserId, int? assignedByUserId)
        {
            int procResult;
            return ApiGetTaskList(standardEffDate, siteId, programId, assignedToUserId, assignedByUserId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTaskListReturnModel> ApiGetTaskList(string standardEffDate, int? siteId, int? programId, int? assignedToUserId, int? assignedByUserId, out int procResult)
        {
            var standardEffDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = standardEffDate, Size = 10 };
            if (standardEffDateParam.Value == null)
                standardEffDateParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var assignedToUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AssignedToUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = assignedToUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!assignedToUserId.HasValue)
                assignedToUserIdParam.Value = System.DBNull.Value;

            var assignedByUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AssignedByUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = assignedByUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!assignedByUserId.HasValue)
                assignedByUserIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTaskListReturnModel>("EXEC @procResult = [dbo].[apiGetTaskList] @StandardEffDate, @SiteID, @ProgramID, @AssignedToUserID, @AssignedByUserID", standardEffDateParam, siteIdParam, programIdParam, assignedToUserIdParam, assignedByUserIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTaskListReturnModel>> ApiGetTaskListAsync(string standardEffDate, int? siteId, int? programId, int? assignedToUserId, int? assignedByUserId)
        {
            var standardEffDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = standardEffDate, Size = 10 };
            if (standardEffDateParam.Value == null)
                standardEffDateParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var assignedToUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AssignedToUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = assignedToUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!assignedToUserId.HasValue)
                assignedToUserIdParam.Value = System.DBNull.Value;

            var assignedByUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AssignedByUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = assignedByUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!assignedByUserId.HasValue)
                assignedByUserIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTaskListReturnModel>("EXEC [dbo].[apiGetTaskList] @StandardEffDate, @SiteID, @ProgramID, @AssignedToUserID, @AssignedByUserID", standardEffDateParam, siteIdParam, programIdParam, assignedToUserIdParam, assignedByUserIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTracerByIdReturnModel> ApiGetTracerById(int? tracerCustomId)
        {
            int procResult;
            return ApiGetTracerById(tracerCustomId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTracerByIdReturnModel> ApiGetTracerById(int? tracerCustomId, out int procResult)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTracerByIdReturnModel>("EXEC @procResult = [dbo].[apiGetTracerByID] @TracerCustomID", tracerCustomIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTracerByIdReturnModel>> ApiGetTracerByIdAsync(int? tracerCustomId)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTracerByIdReturnModel>("EXEC [dbo].[apiGetTracerByID] @TracerCustomID", tracerCustomIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTracerCategoryBySiteIdReturnModel> ApiGetTracerCategoryBySiteId(int? siteId)
        {
            int procResult;
            return ApiGetTracerCategoryBySiteId(siteId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTracerCategoryBySiteIdReturnModel> ApiGetTracerCategoryBySiteId(int? siteId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTracerCategoryBySiteIdReturnModel>("EXEC @procResult = [dbo].[apiGetTracerCategoryBySiteID] @SiteID", siteIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTracerCategoryBySiteIdReturnModel>> ApiGetTracerCategoryBySiteIdAsync(int? siteId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTracerCategoryBySiteIdReturnModel>("EXEC [dbo].[apiGetTracerCategoryBySiteID] @SiteID", siteIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTracerCategoryNamesReturnModel> ApiGetTracerCategoryNames(int? siteId, int? programId)
        {
            int procResult;
            return ApiGetTracerCategoryNames(siteId, programId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTracerCategoryNamesReturnModel> ApiGetTracerCategoryNames(int? siteId, int? programId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTracerCategoryNamesReturnModel>("EXEC @procResult = [dbo].[apiGetTracerCategoryNames] @SiteID, @ProgramID", siteIdParam, programIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTracerCategoryNamesReturnModel>> ApiGetTracerCategoryNamesAsync(int? siteId, int? programId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTracerCategoryNamesReturnModel>("EXEC [dbo].[apiGetTracerCategoryNames] @SiteID, @ProgramID", siteIdParam, programIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTracerHeaderReturnModel> ApiGetTracerHeader(int? tracerCustomId, int? tracerResponseId, int? siteId, int? programId)
        {
            int procResult;
            return ApiGetTracerHeader(tracerCustomId, tracerResponseId, siteId, programId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTracerHeaderReturnModel> ApiGetTracerHeader(int? tracerCustomId, int? tracerResponseId, int? siteId, int? programId, out int procResult)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTracerHeaderReturnModel>("EXEC @procResult = [dbo].[apiGetTracerHeader] @TracerCustomID, @TracerResponseID, @SiteID, @ProgramID", tracerCustomIdParam, tracerResponseIdParam, siteIdParam, programIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTracerHeaderReturnModel>> ApiGetTracerHeaderAsync(int? tracerCustomId, int? tracerResponseId, int? siteId, int? programId)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTracerHeaderReturnModel>("EXEC [dbo].[apiGetTracerHeader] @TracerCustomID, @TracerResponseID, @SiteID, @ProgramID", tracerCustomIdParam, tracerResponseIdParam, siteIdParam, programIdParam).ToListAsync();

            return procResultData;
        }

        public int ApiGetTracerImagesCount(int? tracerResponseId)
        {
            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiGetTracerImagesCount] @TracerResponseID", tracerResponseIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiGetTracerImagesTempReturnModel> ApiGetTracerImagesTemp(int? tracerCustomId, int? userId)
        {
            int procResult;
            return ApiGetTracerImagesTemp(tracerCustomId, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTracerImagesTempReturnModel> ApiGetTracerImagesTemp(int? tracerCustomId, int? userId, out int procResult)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTracerImagesTempReturnModel>("EXEC @procResult = [dbo].[apiGetTracerImagesTemp] @TracerCustomID, @UserID", tracerCustomIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTracerImagesTempReturnModel>> ApiGetTracerImagesTempAsync(int? tracerCustomId, int? userId)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTracerImagesTempReturnModel>("EXEC [dbo].[apiGetTracerImagesTemp] @TracerCustomID, @UserID", tracerCustomIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTracerQuestionInfoReturnModel> ApiGetTracerQuestionInfo(int? tracerCustomId, int? tracerQuestionId)
        {
            int procResult;
            return ApiGetTracerQuestionInfo(tracerCustomId, tracerQuestionId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTracerQuestionInfoReturnModel> ApiGetTracerQuestionInfo(int? tracerCustomId, int? tracerQuestionId, out int procResult)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTracerQuestionInfoReturnModel>("EXEC @procResult = [dbo].[apiGetTracerQuestionInfo] @TracerCustomID, @TracerQuestionID", tracerCustomIdParam, tracerQuestionIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTracerQuestionInfoReturnModel>> ApiGetTracerQuestionInfoAsync(int? tracerCustomId, int? tracerQuestionId)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTracerQuestionInfoReturnModel>("EXEC [dbo].[apiGetTracerQuestionInfo] @TracerCustomID, @TracerQuestionID", tracerCustomIdParam, tracerQuestionIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTracerQuestionsReturnModel> ApiGetTracerQuestions(int? tracerId)
        {
            int procResult;
            return ApiGetTracerQuestions(tracerId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTracerQuestionsReturnModel> ApiGetTracerQuestions(int? tracerId, out int procResult)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTracerQuestionsReturnModel>("EXEC @procResult = [dbo].[apiGetTracerQuestions] @TracerID", tracerIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTracerQuestionsReturnModel>> ApiGetTracerQuestionsAsync(int? tracerId)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTracerQuestionsReturnModel>("EXEC [dbo].[apiGetTracerQuestions] @TracerID", tracerIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTracersThatCanBeCopiedReturnModel> ApiGetTracersThatCanBeCopied(int? siteId, int? programId, int? userId)
        {
            int procResult;
            return ApiGetTracersThatCanBeCopied(siteId, programId, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTracersThatCanBeCopiedReturnModel> ApiGetTracersThatCanBeCopied(int? siteId, int? programId, int? userId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTracersThatCanBeCopiedReturnModel>("EXEC @procResult = [dbo].[apiGetTracersThatCanBeCopied] @SiteID, @ProgramID, @UserID", siteIdParam, programIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTracersThatCanBeCopiedReturnModel>> ApiGetTracersThatCanBeCopiedAsync(int? siteId, int? programId, int? userId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTracersThatCanBeCopiedReturnModel>("EXEC [dbo].[apiGetTracersThatCanBeCopied] @SiteID, @ProgramID, @UserID", siteIdParam, programIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTracersThatCanBeDeletedReturnModel> ApiGetTracersThatCanBeDeleted(int? siteId, int? programId, int? userId)
        {
            int procResult;
            return ApiGetTracersThatCanBeDeleted(siteId, programId, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTracersThatCanBeDeletedReturnModel> ApiGetTracersThatCanBeDeleted(int? siteId, int? programId, int? userId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTracersThatCanBeDeletedReturnModel>("EXEC @procResult = [dbo].[apiGetTracersThatCanBeDeleted] @SiteID, @ProgramID, @UserID", siteIdParam, programIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTracersThatCanBeDeletedReturnModel>> ApiGetTracersThatCanBeDeletedAsync(int? siteId, int? programId, int? userId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTracersThatCanBeDeletedReturnModel>("EXEC [dbo].[apiGetTracersThatCanBeDeleted] @SiteID, @ProgramID, @UserID", siteIdParam, programIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetUserPreferenceReturnModel> ApiGetUserPreference(int? userId, int? siteId, int? programId, string userPreferenceType)
        {
            int procResult;
            return ApiGetUserPreference(userId, siteId, programId, userPreferenceType, out procResult);
        }

        public System.Collections.Generic.List<ApiGetUserPreferenceReturnModel> ApiGetUserPreference(int? userId, int? siteId, int? programId, string userPreferenceType, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var userPreferenceTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserPreferenceType", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userPreferenceType, Size = 50 };
            if (userPreferenceTypeParam.Value == null)
                userPreferenceTypeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetUserPreferenceReturnModel>("EXEC @procResult = [dbo].[apiGetUserPreference] @UserID, @SiteID, @ProgramID, @UserPreferenceType", userIdParam, siteIdParam, programIdParam, userPreferenceTypeParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetUserPreferenceReturnModel>> ApiGetUserPreferenceAsync(int? userId, int? siteId, int? programId, string userPreferenceType)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var userPreferenceTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserPreferenceType", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userPreferenceType, Size = 50 };
            if (userPreferenceTypeParam.Value == null)
                userPreferenceTypeParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetUserPreferenceReturnModel>("EXEC [dbo].[apiGetUserPreference] @UserID, @SiteID, @ProgramID, @UserPreferenceType", userIdParam, siteIdParam, programIdParam, userPreferenceTypeParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetUserRoleBySiteReturnModel> ApiGetUserRoleBySite(int? userId, int? siteId)
        {
            int procResult;
            return ApiGetUserRoleBySite(userId, siteId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetUserRoleBySiteReturnModel> ApiGetUserRoleBySite(int? userId, int? siteId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetUserRoleBySiteReturnModel>("EXEC @procResult = [dbo].[apiGetUserRoleBySite] @UserID, @SiteID", userIdParam, siteIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetUserRoleBySiteReturnModel>> ApiGetUserRoleBySiteAsync(int? userId, int? siteId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetUserRoleBySiteReturnModel>("EXEC [dbo].[apiGetUserRoleBySite] @UserID, @SiteID", userIdParam, siteIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetUsersReturnModel> ApiGetUsers(string lstUserIDs)
        {
            int procResult;
            return ApiGetUsers(lstUserIDs, out procResult);
        }

        public System.Collections.Generic.List<ApiGetUsersReturnModel> ApiGetUsers(string lstUserIDs, out int procResult)
        {
            var lstUserIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LstUserIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lstUserIDs, Size = -1 };
            if (lstUserIDsParam.Value == null)
                lstUserIDsParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetUsersReturnModel>("EXEC @procResult = [dbo].[apiGetUsers] @LstUserIDs", lstUserIDsParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetUsersReturnModel>> ApiGetUsersAsync(string lstUserIDs)
        {
            var lstUserIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LstUserIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lstUserIDs, Size = -1 };
            if (lstUserIDsParam.Value == null)
                lstUserIDsParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetUsersReturnModel>("EXEC [dbo].[apiGetUsers] @LstUserIDs", lstUserIDsParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetUsersDetailsReturnModel> ApiGetUsersDetails(string lstUserIDs, int? siteId)
        {
            int procResult;
            return ApiGetUsersDetails(lstUserIDs, siteId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetUsersDetailsReturnModel> ApiGetUsersDetails(string lstUserIDs, int? siteId, out int procResult)
        {
            var lstUserIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LstUserIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lstUserIDs, Size = -1 };
            if (lstUserIDsParam.Value == null)
                lstUserIDsParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetUsersDetailsReturnModel>("EXEC @procResult = [dbo].[apiGetUsersDetails] @LstUserIDs, @SiteID", lstUserIDsParam, siteIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetUsersDetailsReturnModel>> ApiGetUsersDetailsAsync(string lstUserIDs, int? siteId)
        {
            var lstUserIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LstUserIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lstUserIDs, Size = -1 };
            if (lstUserIDsParam.Value == null)
                lstUserIDsParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetUsersDetailsReturnModel>("EXEC [dbo].[apiGetUsersDetails] @LstUserIDs, @SiteID", lstUserIDsParam, siteIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetUserSecurityAttributesReturnModel> ApiGetUserSecurityAttributes(int? userId, int? codeCategoryId, int? questionTyeId1, int? questionTyeId2)
        {
            int procResult;
            return ApiGetUserSecurityAttributes(userId, codeCategoryId, questionTyeId1, questionTyeId2, out procResult);
        }

        public System.Collections.Generic.List<ApiGetUserSecurityAttributesReturnModel> ApiGetUserSecurityAttributes(int? userId, int? codeCategoryId, int? questionTyeId1, int? questionTyeId2, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var codeCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CodeCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = codeCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!codeCategoryId.HasValue)
                codeCategoryIdParam.Value = System.DBNull.Value;

            var questionTyeId1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionTyeID1", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionTyeId1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionTyeId1.HasValue)
                questionTyeId1Param.Value = System.DBNull.Value;

            var questionTyeId2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionTyeID2", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionTyeId2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionTyeId2.HasValue)
                questionTyeId2Param.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetUserSecurityAttributesReturnModel>("EXEC @procResult = [dbo].[apiGetUserSecurityAttributes] @UserID, @CodeCategoryID, @QuestionTyeID1, @QuestionTyeID2", userIdParam, codeCategoryIdParam, questionTyeId1Param, questionTyeId2Param, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetUserSecurityAttributesReturnModel>> ApiGetUserSecurityAttributesAsync(int? userId, int? codeCategoryId, int? questionTyeId1, int? questionTyeId2)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var codeCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CodeCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = codeCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!codeCategoryId.HasValue)
                codeCategoryIdParam.Value = System.DBNull.Value;

            var questionTyeId1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionTyeID1", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionTyeId1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionTyeId1.HasValue)
                questionTyeId1Param.Value = System.DBNull.Value;

            var questionTyeId2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionTyeID2", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionTyeId2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionTyeId2.HasValue)
                questionTyeId2Param.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetUserSecurityAttributesReturnModel>("EXEC [dbo].[apiGetUserSecurityAttributes] @UserID, @CodeCategoryID, @QuestionTyeID1, @QuestionTyeID2", userIdParam, codeCategoryIdParam, questionTyeId1Param, questionTyeId2Param).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetUsersForAssignmentReturnModel> ApiGetUsersForAssignment(string searchString, string siteList)
        {
            int procResult;
            return ApiGetUsersForAssignment(searchString, siteList, out procResult);
        }

        public System.Collections.Generic.List<ApiGetUsersForAssignmentReturnModel> ApiGetUsersForAssignment(string searchString, string siteList, out int procResult)
        {
            var searchStringParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SearchString", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = searchString, Size = -1 };
            if (searchStringParam.Value == null)
                searchStringParam.Value = System.DBNull.Value;

            var siteListParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteList", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = siteList, Size = -1 };
            if (siteListParam.Value == null)
                siteListParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetUsersForAssignmentReturnModel>("EXEC @procResult = [dbo].[apiGetUsersForAssignment] @SearchString, @SiteList", searchStringParam, siteListParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetUsersForAssignmentReturnModel>> ApiGetUsersForAssignmentAsync(string searchString, string siteList)
        {
            var searchStringParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SearchString", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = searchString, Size = -1 };
            if (searchStringParam.Value == null)
                searchStringParam.Value = System.DBNull.Value;

            var siteListParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteList", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = siteList, Size = -1 };
            if (siteListParam.Value == null)
                siteListParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetUsersForAssignmentReturnModel>("EXEC [dbo].[apiGetUsersForAssignment] @SearchString, @SiteList", searchStringParam, siteListParam).ToListAsync();

            return procResultData;
        }

        public int ApiGuestAccessSetupSave(int? siteId, bool? guestAccessFlag, bool? domainRestrictionFlag, string domainNames, int? userId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var guestAccessFlagParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@GuestAccessFlag", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = guestAccessFlag.GetValueOrDefault() };
            if (!guestAccessFlag.HasValue)
                guestAccessFlagParam.Value = System.DBNull.Value;

            var domainRestrictionFlagParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DomainRestrictionFlag", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = domainRestrictionFlag.GetValueOrDefault() };
            if (!domainRestrictionFlag.HasValue)
                domainRestrictionFlagParam.Value = System.DBNull.Value;

            var domainNamesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DomainNames", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = domainNames, Size = -1 };
            if (domainNamesParam.Value == null)
                domainNamesParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiGuestAccessSetupSave] @SiteID, @GuestAccessFlag, @DomainRestrictionFlag, @DomainNames, @UserID", siteIdParam, guestAccessFlagParam, domainRestrictionFlagParam, domainNamesParam, userIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiGuestLinkReadReturnModel> ApiGuestLinkRead(int? siteId, int? tracerCustomId, int? programId, System.Guid? guestLinkGuid, int? guestLinkId)
        {
            int procResult;
            return ApiGuestLinkRead(siteId, tracerCustomId, programId, guestLinkGuid, guestLinkId, out procResult);
        }

        public System.Collections.Generic.List<ApiGuestLinkReadReturnModel> ApiGuestLinkRead(int? siteId, int? tracerCustomId, int? programId, System.Guid? guestLinkGuid, int? guestLinkId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var guestLinkGuidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@GuestLinkGUID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = guestLinkGuid.GetValueOrDefault() };
            if (!guestLinkGuid.HasValue)
                guestLinkGuidParam.Value = System.DBNull.Value;

            var guestLinkIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@GuestLinkID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = guestLinkId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!guestLinkId.HasValue)
                guestLinkIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGuestLinkReadReturnModel>("EXEC @procResult = [dbo].[apiGuestLink_Read] @SiteID, @TracerCustomID, @ProgramID, @GuestLinkGUID, @GuestLinkID", siteIdParam, tracerCustomIdParam, programIdParam, guestLinkGuidParam, guestLinkIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGuestLinkReadReturnModel>> ApiGuestLinkReadAsync(int? siteId, int? tracerCustomId, int? programId, System.Guid? guestLinkGuid, int? guestLinkId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var guestLinkGuidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@GuestLinkGUID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = guestLinkGuid.GetValueOrDefault() };
            if (!guestLinkGuid.HasValue)
                guestLinkGuidParam.Value = System.DBNull.Value;

            var guestLinkIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@GuestLinkID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = guestLinkId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!guestLinkId.HasValue)
                guestLinkIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGuestLinkReadReturnModel>("EXEC [dbo].[apiGuestLink_Read] @SiteID, @TracerCustomID, @ProgramID, @GuestLinkGUID, @GuestLinkID", siteIdParam, tracerCustomIdParam, programIdParam, guestLinkGuidParam, guestLinkIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGuestUserTracerDetailSelectBySiteProgramReturnModel> ApiGuestUserTracerDetailSelectBySiteProgram(int? userId, int? siteId, int? programId, int? statusId)
        {
            int procResult;
            return ApiGuestUserTracerDetailSelectBySiteProgram(userId, siteId, programId, statusId, out procResult);
        }

        public System.Collections.Generic.List<ApiGuestUserTracerDetailSelectBySiteProgramReturnModel> ApiGuestUserTracerDetailSelectBySiteProgram(int? userId, int? siteId, int? programId, int? statusId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var statusIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StatusID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = statusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!statusId.HasValue)
                statusIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGuestUserTracerDetailSelectBySiteProgramReturnModel>("EXEC @procResult = [dbo].[apiGuestUserTracerDetailSelectBySiteProgram] @UserID, @SiteID, @ProgramID, @StatusID", userIdParam, siteIdParam, programIdParam, statusIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGuestUserTracerDetailSelectBySiteProgramReturnModel>> ApiGuestUserTracerDetailSelectBySiteProgramAsync(int? userId, int? siteId, int? programId, int? statusId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var statusIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StatusID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = statusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!statusId.HasValue)
                statusIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGuestUserTracerDetailSelectBySiteProgramReturnModel>("EXEC [dbo].[apiGuestUserTracerDetailSelectBySiteProgram] @UserID, @SiteID, @ProgramID, @StatusID", userIdParam, siteIdParam, programIdParam, statusIdParam).ToListAsync();

            return procResultData;
        }

        public int ApiInsertGuestLinkAccessed(int? userId, System.Guid? guestLinkGuid)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var guestLinkGuidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@GuestLinkGuid", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = guestLinkGuid.GetValueOrDefault() };
            if (!guestLinkGuid.HasValue)
                guestLinkGuidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiInsertGuestLinkAccessed] @UserID, @GuestLinkGuid", userIdParam, guestLinkGuidParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiInsertQuestionImageMap(int? tracerQuestionId, int? tracerResponseId, string tempImageIDs, int? userId)
        {
            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var tempImageIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TempImageIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = tempImageIDs, Size = -1 };
            if (tempImageIDsParam.Value == null)
                tempImageIDsParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiInsertQuestionImageMap] @TracerQuestionID, @TracerResponseID, @TempImageIDs, @UserID", tracerQuestionIdParam, tracerResponseIdParam, tempImageIDsParam, userIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiInsertTracerTempImage(int? siteId, int? programId, int? tracerCustomId, int? tracerQuestionId, string imageName, int? userId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var imageNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ImageName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = imageName, Size = -1 };
            if (imageNameParam.Value == null)
                imageNameParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiInsertTracerTempImage] @SiteID, @ProgramID, @TracerCustomID, @TracerQuestionID, @ImageName, @UserID", siteIdParam, programIdParam, tracerCustomIdParam, tracerQuestionIdParam, imageNameParam, userIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiLogicallyDeleteObservation(int? tracerResponseId, int? updatedById)
        {
            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var updatedByIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedById.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedById.HasValue)
                updatedByIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiLogicallyDeleteObservation] @TracerResponseID, @UpdatedByID", tracerResponseIdParam, updatedByIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiMenuStateGetReturnModel> ApiMenuStateGet(int? userId)
        {
            int procResult;
            return ApiMenuStateGet(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiMenuStateGetReturnModel> ApiMenuStateGet(int? userId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMenuStateGetReturnModel>("EXEC @procResult = [dbo].[apiMenuState_Get] @UserID", userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMenuStateGetReturnModel>> ApiMenuStateGetAsync(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMenuStateGetReturnModel>("EXEC [dbo].[apiMenuState_Get] @UserID", userIdParam).ToListAsync();

            return procResultData;
        }

        public int ApiMenuStateInit(int? userId, int? siteId, int? roleId, bool? accessToEdition, bool? accessToAmp, bool? accessToTracers, bool? accessToEramp, bool? accessToErTracers)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var roleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = roleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!roleId.HasValue)
                roleIdParam.Value = System.DBNull.Value;

            var accessToEditionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccessToEdition", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = accessToEdition.GetValueOrDefault() };
            if (!accessToEdition.HasValue)
                accessToEditionParam.Value = System.DBNull.Value;

            var accessToAmpParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccessToAMP", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = accessToAmp.GetValueOrDefault() };
            if (!accessToAmp.HasValue)
                accessToAmpParam.Value = System.DBNull.Value;

            var accessToTracersParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccessToTracers", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = accessToTracers.GetValueOrDefault() };
            if (!accessToTracers.HasValue)
                accessToTracersParam.Value = System.DBNull.Value;

            var accessToErampParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccessToERAMP", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = accessToEramp.GetValueOrDefault() };
            if (!accessToEramp.HasValue)
                accessToErampParam.Value = System.DBNull.Value;

            var accessToErTracersParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccessToERTracers", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = accessToErTracers.GetValueOrDefault() };
            if (!accessToErTracers.HasValue)
                accessToErTracersParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiMenuState_Init] @UserID, @SiteID, @RoleID, @AccessToEdition, @AccessToAMP, @AccessToTracers, @AccessToERAMP, @AccessToERTracers", userIdParam, siteIdParam, roleIdParam, accessToEditionParam, accessToAmpParam, accessToTracersParam, accessToErampParam, accessToErTracersParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiMenuStateInitLocalDebug(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiMenuState_InitLocalDebug] @UserID", userIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiMenuStateProductsBySiteReturnModel> ApiMenuStateProductsBySite(string userLogonId)
        {
            int procResult;
            return ApiMenuStateProductsBySite(userLogonId, out procResult);
        }

        public System.Collections.Generic.List<ApiMenuStateProductsBySiteReturnModel> ApiMenuStateProductsBySite(string userLogonId, out int procResult)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 100 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMenuStateProductsBySiteReturnModel>("EXEC @procResult = [dbo].[apiMenuState_ProductsBySite] @UserLogonID", userLogonIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMenuStateProductsBySiteReturnModel>> ApiMenuStateProductsBySiteAsync(string userLogonId)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 100 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMenuStateProductsBySiteReturnModel>("EXEC [dbo].[apiMenuState_ProductsBySite] @UserLogonID", userLogonIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMenuStateProductsBySiteAndProgramReturnModel> ApiMenuStateProductsBySiteAndProgram(int? userId)
        {
            int procResult;
            return ApiMenuStateProductsBySiteAndProgram(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiMenuStateProductsBySiteAndProgramReturnModel> ApiMenuStateProductsBySiteAndProgram(int? userId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMenuStateProductsBySiteAndProgramReturnModel>("EXEC @procResult = [dbo].[apiMenuState_ProductsBySiteAndProgram] @UserID", userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMenuStateProductsBySiteAndProgramReturnModel>> ApiMenuStateProductsBySiteAndProgramAsync(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMenuStateProductsBySiteAndProgramReturnModel>("EXEC [dbo].[apiMenuState_ProductsBySiteAndProgram] @UserID", userIdParam).ToListAsync();

            return procResultData;
        }

        public int ApiMenuStateSave(int? userId, int? siteId, int? userRoleId, int? programId, int? certificationItemId, bool? isCurrentCycle, string cycleEffectiveDate, string mockSurveyTitle, bool? accessToEdition, bool? accessToAmp, bool? accessToTracers, bool? accessToEramp, bool? accessToErTracers, bool? accessToCms, bool? accessToMockSurvey, bool? userIsMultiSiteAdmin)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var userRoleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserRoleID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userRoleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userRoleId.HasValue)
                userRoleIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var certificationItemIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CertificationItemID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = certificationItemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!certificationItemId.HasValue)
                certificationItemIdParam.Value = System.DBNull.Value;

            var isCurrentCycleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsCurrentCycle", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isCurrentCycle.GetValueOrDefault() };
            if (!isCurrentCycle.HasValue)
                isCurrentCycleParam.Value = System.DBNull.Value;

            var cycleEffectiveDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CycleEffectiveDate", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = cycleEffectiveDate, Size = 20 };
            if (cycleEffectiveDateParam.Value == null)
                cycleEffectiveDateParam.Value = System.DBNull.Value;

            var mockSurveyTitleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MockSurveyTitle", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = mockSurveyTitle, Size = 250 };
            if (mockSurveyTitleParam.Value == null)
                mockSurveyTitleParam.Value = System.DBNull.Value;

            var accessToEditionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccessToEdition", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = accessToEdition.GetValueOrDefault() };
            if (!accessToEdition.HasValue)
                accessToEditionParam.Value = System.DBNull.Value;

            var accessToAmpParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccessToAMP", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = accessToAmp.GetValueOrDefault() };
            if (!accessToAmp.HasValue)
                accessToAmpParam.Value = System.DBNull.Value;

            var accessToTracersParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccessToTracers", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = accessToTracers.GetValueOrDefault() };
            if (!accessToTracers.HasValue)
                accessToTracersParam.Value = System.DBNull.Value;

            var accessToErampParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccessToERAMP", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = accessToEramp.GetValueOrDefault() };
            if (!accessToEramp.HasValue)
                accessToErampParam.Value = System.DBNull.Value;

            var accessToErTracersParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccessToERTracers", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = accessToErTracers.GetValueOrDefault() };
            if (!accessToErTracers.HasValue)
                accessToErTracersParam.Value = System.DBNull.Value;

            var accessToCmsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccessToCMS", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = accessToCms.GetValueOrDefault() };
            if (!accessToCms.HasValue)
                accessToCmsParam.Value = System.DBNull.Value;

            var accessToMockSurveyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccessToMockSurvey", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = accessToMockSurvey.GetValueOrDefault() };
            if (!accessToMockSurvey.HasValue)
                accessToMockSurveyParam.Value = System.DBNull.Value;

            var userIsMultiSiteAdminParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserIsMultiSiteAdmin", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = userIsMultiSiteAdmin.GetValueOrDefault() };
            if (!userIsMultiSiteAdmin.HasValue)
                userIsMultiSiteAdminParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiMenuState_Save] @UserID, @SiteID, @UserRoleID, @ProgramID, @CertificationItemID, @IsCurrentCycle, @CycleEffectiveDate, @MockSurveyTitle, @AccessToEdition, @AccessToAMP, @AccessToTracers, @AccessToERAMP, @AccessToERTracers, @AccessToCMS, @AccessToMockSurvey, @UserIsMultiSiteAdmin", userIdParam, siteIdParam, userRoleIdParam, programIdParam, certificationItemIdParam, isCurrentCycleParam, cycleEffectiveDateParam, mockSurveyTitleParam, accessToEditionParam, accessToAmpParam, accessToTracersParam, accessToErampParam, accessToErTracersParam, accessToCmsParam, accessToMockSurveyParam, userIsMultiSiteAdminParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiMenuStateSaveArg(int? userId, string key, string value)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var keyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Key", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = key, Size = 20 };
            if (keyParam.Value == null)
                keyParam.Value = System.DBNull.Value;

            var valueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@VALUE", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = value, Size = 20 };
            if (valueParam.Value == null)
                valueParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiMenuState_SaveArg] @UserID, @Key, @VALUE", userIdParam, keyParam, valueParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiMenuStateSiteProgramDropdowns(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiMenuState_SiteProgramDropdowns] @UserID", userIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiMenuStateUpdate(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiMenuState_Update] @UserID", userIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiMobileGetObservationDetailsByIdReturnModel> ApiMobileGetObservationDetailsById(int? tracerCustomId, int? tracerResponseId, bool? isGuestAccess)
        {
            int procResult;
            return ApiMobileGetObservationDetailsById(tracerCustomId, tracerResponseId, isGuestAccess, out procResult);
        }

        public System.Collections.Generic.List<ApiMobileGetObservationDetailsByIdReturnModel> ApiMobileGetObservationDetailsById(int? tracerCustomId, int? tracerResponseId, bool? isGuestAccess, out int procResult)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var isGuestAccessParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsGuestAccess", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isGuestAccess.GetValueOrDefault() };
            if (!isGuestAccess.HasValue)
                isGuestAccessParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMobileGetObservationDetailsByIdReturnModel>("EXEC @procResult = [dbo].[apiMobileGetObservationDetailsByID] @TracerCustomID, @TracerResponseID, @IsGuestAccess", tracerCustomIdParam, tracerResponseIdParam, isGuestAccessParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMobileGetObservationDetailsByIdReturnModel>> ApiMobileGetObservationDetailsByIdAsync(int? tracerCustomId, int? tracerResponseId, bool? isGuestAccess)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var isGuestAccessParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsGuestAccess", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isGuestAccess.GetValueOrDefault() };
            if (!isGuestAccess.HasValue)
                isGuestAccessParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMobileGetObservationDetailsByIdReturnModel>("EXEC [dbo].[apiMobileGetObservationDetailsByID] @TracerCustomID, @TracerResponseID, @IsGuestAccess", tracerCustomIdParam, tracerResponseIdParam, isGuestAccessParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMobileGetObservationDetailsByIdWithValidationMessageReturnModel> ApiMobileGetObservationDetailsByIdWithValidationMessage(int? tracerCustomId, int? tracerResponseId, bool? isGuestAccess)
        {
            int procResult;
            return ApiMobileGetObservationDetailsByIdWithValidationMessage(tracerCustomId, tracerResponseId, isGuestAccess, out procResult);
        }

        public System.Collections.Generic.List<ApiMobileGetObservationDetailsByIdWithValidationMessageReturnModel> ApiMobileGetObservationDetailsByIdWithValidationMessage(int? tracerCustomId, int? tracerResponseId, bool? isGuestAccess, out int procResult)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var isGuestAccessParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsGuestAccess", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isGuestAccess.GetValueOrDefault() };
            if (!isGuestAccess.HasValue)
                isGuestAccessParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMobileGetObservationDetailsByIdWithValidationMessageReturnModel>("EXEC @procResult = [dbo].[apiMobileGetObservationDetailsByIDWithValidationMessage] @TracerCustomID, @TracerResponseID, @IsGuestAccess", tracerCustomIdParam, tracerResponseIdParam, isGuestAccessParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMobileGetObservationDetailsByIdWithValidationMessageReturnModel>> ApiMobileGetObservationDetailsByIdWithValidationMessageAsync(int? tracerCustomId, int? tracerResponseId, bool? isGuestAccess)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var isGuestAccessParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsGuestAccess", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isGuestAccess.GetValueOrDefault() };
            if (!isGuestAccess.HasValue)
                isGuestAccessParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMobileGetObservationDetailsByIdWithValidationMessageReturnModel>("EXEC [dbo].[apiMobileGetObservationDetailsByIDWithValidationMessage] @TracerCustomID, @TracerResponseID, @IsGuestAccess", tracerCustomIdParam, tracerResponseIdParam, isGuestAccessParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMobileGuestUserSelectProgramsBySiteReturnModel> ApiMobileGuestUserSelectProgramsBySite(int? userId, int? siteId, int? productId)
        {
            int procResult;
            return ApiMobileGuestUserSelectProgramsBySite(userId, siteId, productId, out procResult);
        }

        public System.Collections.Generic.List<ApiMobileGuestUserSelectProgramsBySiteReturnModel> ApiMobileGuestUserSelectProgramsBySite(int? userId, int? siteId, int? productId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMobileGuestUserSelectProgramsBySiteReturnModel>("EXEC @procResult = [dbo].[apiMobileGuestUserSelectProgramsBySite] @UserID, @SiteID, @ProductID", userIdParam, siteIdParam, productIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMobileGuestUserSelectProgramsBySiteReturnModel>> ApiMobileGuestUserSelectProgramsBySiteAsync(int? userId, int? siteId, int? productId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMobileGuestUserSelectProgramsBySiteReturnModel>("EXEC [dbo].[apiMobileGuestUserSelectProgramsBySite] @UserID, @SiteID, @ProductID", userIdParam, siteIdParam, productIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMobileGuestUserSelectSitesReturnModel> ApiMobileGuestUserSelectSites(int? userId, int? productId)
        {
            int procResult;
            return ApiMobileGuestUserSelectSites(userId, productId, out procResult);
        }

        public System.Collections.Generic.List<ApiMobileGuestUserSelectSitesReturnModel> ApiMobileGuestUserSelectSites(int? userId, int? productId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMobileGuestUserSelectSitesReturnModel>("EXEC @procResult = [dbo].[apiMobileGuestUserSelectSites] @UserID, @ProductID", userIdParam, productIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMobileGuestUserSelectSitesReturnModel>> ApiMobileGuestUserSelectSitesAsync(int? userId, int? productId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMobileGuestUserSelectSitesReturnModel>("EXEC [dbo].[apiMobileGuestUserSelectSites] @UserID, @ProductID", userIdParam, productIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMobileResponsesSelectByTracerIdReturnModel> ApiMobileResponsesSelectByTracerId(int? tracerId, string responseStatusCsv)
        {
            int procResult;
            return ApiMobileResponsesSelectByTracerId(tracerId, responseStatusCsv, out procResult);
        }

        public System.Collections.Generic.List<ApiMobileResponsesSelectByTracerIdReturnModel> ApiMobileResponsesSelectByTracerId(int? tracerId, string responseStatusCsv, out int procResult)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var responseStatusCsvParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ResponseStatusCSV", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = responseStatusCsv, Size = 100 };
            if (responseStatusCsvParam.Value == null)
                responseStatusCsvParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMobileResponsesSelectByTracerIdReturnModel>("EXEC @procResult = [dbo].[apiMobileResponsesSelectByTracerId] @TracerID, @ResponseStatusCSV", tracerIdParam, responseStatusCsvParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMobileResponsesSelectByTracerIdReturnModel>> ApiMobileResponsesSelectByTracerIdAsync(int? tracerId, string responseStatusCsv)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var responseStatusCsvParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ResponseStatusCSV", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = responseStatusCsv, Size = 100 };
            if (responseStatusCsvParam.Value == null)
                responseStatusCsvParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMobileResponsesSelectByTracerIdReturnModel>("EXEC [dbo].[apiMobileResponsesSelectByTracerId] @TracerID, @ResponseStatusCSV", tracerIdParam, responseStatusCsvParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMobileSaveTracerResponseReturnModel> ApiMobileSaveTracerResponse(int? tracerId, int? observationId, string title, System.DateTime? observationDate, string medicalStaffInvolved, string staffInterviewed, int? observationsCount, string surveyTeam, string departmentId, string location, int? observationStatusId, int? tracerErrorValue, string note, int? userId, string medicalRecordNumber, string equipmentObserved, string contractedService, bool? isCalledByGuestAccess)
        {
            int procResult;
            return ApiMobileSaveTracerResponse(tracerId, observationId, title, observationDate, medicalStaffInvolved, staffInterviewed, observationsCount, surveyTeam, departmentId, location, observationStatusId, tracerErrorValue, note, userId, medicalRecordNumber, equipmentObserved, contractedService, isCalledByGuestAccess, out procResult);
        }

        public System.Collections.Generic.List<ApiMobileSaveTracerResponseReturnModel> ApiMobileSaveTracerResponse(int? tracerId, int? observationId, string title, System.DateTime? observationDate, string medicalStaffInvolved, string staffInterviewed, int? observationsCount, string surveyTeam, string departmentId, string location, int? observationStatusId, int? tracerErrorValue, string note, int? userId, string medicalRecordNumber, string equipmentObserved, string contractedService, bool? isCalledByGuestAccess, out int procResult)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var observationIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ObservationId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = observationId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!observationId.HasValue)
                observationIdParam.Value = System.DBNull.Value;

            var titleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Title", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = title, Size = 255 };
            if (titleParam.Value == null)
                titleParam.Value = System.DBNull.Value;

            var observationDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ObservationDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = observationDate.GetValueOrDefault() };
            if (!observationDate.HasValue)
                observationDateParam.Value = System.DBNull.Value;

            var medicalStaffInvolvedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MedicalStaffInvolved", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = medicalStaffInvolved, Size = 1000 };
            if (medicalStaffInvolvedParam.Value == null)
                medicalStaffInvolvedParam.Value = System.DBNull.Value;

            var staffInterviewedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StaffInterviewed", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = staffInterviewed, Size = 1000 };
            if (staffInterviewedParam.Value == null)
                staffInterviewedParam.Value = System.DBNull.Value;

            var observationsCountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ObservationsCount", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = observationsCount.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!observationsCount.HasValue)
                observationsCountParam.Value = System.DBNull.Value;

            var surveyTeamParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SurveyTeam", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = surveyTeam, Size = 1000 };
            if (surveyTeamParam.Value == null)
                surveyTeamParam.Value = System.DBNull.Value;

            var departmentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DepartmentID", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = departmentId, Size = 1000 };
            if (departmentIdParam.Value == null)
                departmentIdParam.Value = System.DBNull.Value;

            var locationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Location", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = location, Size = 100 };
            if (locationParam.Value == null)
                locationParam.Value = System.DBNull.Value;

            var observationStatusIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ObservationStatusId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = observationStatusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!observationStatusId.HasValue)
                observationStatusIdParam.Value = System.DBNull.Value;

            var tracerErrorValueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerErrorValue", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerErrorValue.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerErrorValue.HasValue)
                tracerErrorValueParam.Value = System.DBNull.Value;

            var noteParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Note", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = note, Size = 3000 };
            if (noteParam.Value == null)
                noteParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var medicalRecordNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MedicalRecordNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = medicalRecordNumber, Size = 100 };
            if (medicalRecordNumberParam.Value == null)
                medicalRecordNumberParam.Value = System.DBNull.Value;

            var equipmentObservedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EquipmentObserved", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = equipmentObserved, Size = 1000 };
            if (equipmentObservedParam.Value == null)
                equipmentObservedParam.Value = System.DBNull.Value;

            var contractedServiceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ContractedService", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = contractedService, Size = 1000 };
            if (contractedServiceParam.Value == null)
                contractedServiceParam.Value = System.DBNull.Value;

            var isCalledByGuestAccessParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsCalledByGuestAccess", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isCalledByGuestAccess.GetValueOrDefault() };
            if (!isCalledByGuestAccess.HasValue)
                isCalledByGuestAccessParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMobileSaveTracerResponseReturnModel>("EXEC @procResult = [dbo].[apiMobileSaveTracerResponse] @TracerId, @ObservationId, @Title, @ObservationDate, @MedicalStaffInvolved, @StaffInterviewed, @ObservationsCount, @SurveyTeam, @DepartmentID, @Location, @ObservationStatusId, @TracerErrorValue, @Note, @UserID, @MedicalRecordNumber, @EquipmentObserved, @ContractedService, @IsCalledByGuestAccess", tracerIdParam, observationIdParam, titleParam, observationDateParam, medicalStaffInvolvedParam, staffInterviewedParam, observationsCountParam, surveyTeamParam, departmentIdParam, locationParam, observationStatusIdParam, tracerErrorValueParam, noteParam, userIdParam, medicalRecordNumberParam, equipmentObservedParam, contractedServiceParam, isCalledByGuestAccessParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMobileSaveTracerResponseReturnModel>> ApiMobileSaveTracerResponseAsync(int? tracerId, int? observationId, string title, System.DateTime? observationDate, string medicalStaffInvolved, string staffInterviewed, int? observationsCount, string surveyTeam, string departmentId, string location, int? observationStatusId, int? tracerErrorValue, string note, int? userId, string medicalRecordNumber, string equipmentObserved, string contractedService, bool? isCalledByGuestAccess)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var observationIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ObservationId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = observationId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!observationId.HasValue)
                observationIdParam.Value = System.DBNull.Value;

            var titleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Title", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = title, Size = 255 };
            if (titleParam.Value == null)
                titleParam.Value = System.DBNull.Value;

            var observationDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ObservationDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = observationDate.GetValueOrDefault() };
            if (!observationDate.HasValue)
                observationDateParam.Value = System.DBNull.Value;

            var medicalStaffInvolvedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MedicalStaffInvolved", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = medicalStaffInvolved, Size = 1000 };
            if (medicalStaffInvolvedParam.Value == null)
                medicalStaffInvolvedParam.Value = System.DBNull.Value;

            var staffInterviewedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StaffInterviewed", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = staffInterviewed, Size = 1000 };
            if (staffInterviewedParam.Value == null)
                staffInterviewedParam.Value = System.DBNull.Value;

            var observationsCountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ObservationsCount", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = observationsCount.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!observationsCount.HasValue)
                observationsCountParam.Value = System.DBNull.Value;

            var surveyTeamParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SurveyTeam", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = surveyTeam, Size = 1000 };
            if (surveyTeamParam.Value == null)
                surveyTeamParam.Value = System.DBNull.Value;

            var departmentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DepartmentID", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = departmentId, Size = 1000 };
            if (departmentIdParam.Value == null)
                departmentIdParam.Value = System.DBNull.Value;

            var locationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Location", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = location, Size = 100 };
            if (locationParam.Value == null)
                locationParam.Value = System.DBNull.Value;

            var observationStatusIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ObservationStatusId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = observationStatusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!observationStatusId.HasValue)
                observationStatusIdParam.Value = System.DBNull.Value;

            var tracerErrorValueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerErrorValue", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerErrorValue.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerErrorValue.HasValue)
                tracerErrorValueParam.Value = System.DBNull.Value;

            var noteParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Note", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = note, Size = 3000 };
            if (noteParam.Value == null)
                noteParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var medicalRecordNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MedicalRecordNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = medicalRecordNumber, Size = 100 };
            if (medicalRecordNumberParam.Value == null)
                medicalRecordNumberParam.Value = System.DBNull.Value;

            var equipmentObservedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EquipmentObserved", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = equipmentObserved, Size = 1000 };
            if (equipmentObservedParam.Value == null)
                equipmentObservedParam.Value = System.DBNull.Value;

            var contractedServiceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ContractedService", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = contractedService, Size = 1000 };
            if (contractedServiceParam.Value == null)
                contractedServiceParam.Value = System.DBNull.Value;

            var isCalledByGuestAccessParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsCalledByGuestAccess", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isCalledByGuestAccess.GetValueOrDefault() };
            if (!isCalledByGuestAccess.HasValue)
                isCalledByGuestAccessParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMobileSaveTracerResponseReturnModel>("EXEC [dbo].[apiMobileSaveTracerResponse] @TracerId, @ObservationId, @Title, @ObservationDate, @MedicalStaffInvolved, @StaffInterviewed, @ObservationsCount, @SurveyTeam, @DepartmentID, @Location, @ObservationStatusId, @TracerErrorValue, @Note, @UserID, @MedicalRecordNumber, @EquipmentObserved, @ContractedService, @IsCalledByGuestAccess", tracerIdParam, observationIdParam, titleParam, observationDateParam, medicalStaffInvolvedParam, staffInterviewedParam, observationsCountParam, surveyTeamParam, departmentIdParam, locationParam, observationStatusIdParam, tracerErrorValueParam, noteParam, userIdParam, medicalRecordNumberParam, equipmentObservedParam, contractedServiceParam, isCalledByGuestAccessParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMobileTracerGetQuestionDetailReturnModel> ApiMobileTracerGetQuestionDetail(int? tracerCustomId, int? tracerQuestionId, int? tracerResponseId, int? userId)
        {
            int procResult;
            return ApiMobileTracerGetQuestionDetail(tracerCustomId, tracerQuestionId, tracerResponseId, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiMobileTracerGetQuestionDetailReturnModel> ApiMobileTracerGetQuestionDetail(int? tracerCustomId, int? tracerQuestionId, int? tracerResponseId, int? userId, out int procResult)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMobileTracerGetQuestionDetailReturnModel>("EXEC @procResult = [dbo].[apiMobileTracerGetQuestionDetail] @TracerCustomID, @TracerQuestionID, @TracerResponseID, @UserID", tracerCustomIdParam, tracerQuestionIdParam, tracerResponseIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMobileTracerGetQuestionDetailReturnModel>> ApiMobileTracerGetQuestionDetailAsync(int? tracerCustomId, int? tracerQuestionId, int? tracerResponseId, int? userId)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMobileTracerGetQuestionDetailReturnModel>("EXEC [dbo].[apiMobileTracerGetQuestionDetail] @TracerCustomID, @TracerQuestionID, @TracerResponseID, @UserID", tracerCustomIdParam, tracerQuestionIdParam, tracerResponseIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMobileUpdateTracerQuestionAnswerReturnModel> ApiMobileUpdateTracerQuestionAnswer(int? observationId, int? userId, int? tracerQuestionId, int? tracerQuestionAnswerId, decimal? numerator, decimal? denominator, int? questionAnswer, int? questionNoteId, string questionNote)
        {
            int procResult;
            return ApiMobileUpdateTracerQuestionAnswer(observationId, userId, tracerQuestionId, tracerQuestionAnswerId, numerator, denominator, questionAnswer, questionNoteId, questionNote, out procResult);
        }

        public System.Collections.Generic.List<ApiMobileUpdateTracerQuestionAnswerReturnModel> ApiMobileUpdateTracerQuestionAnswer(int? observationId, int? userId, int? tracerQuestionId, int? tracerQuestionAnswerId, decimal? numerator, decimal? denominator, int? questionAnswer, int? questionNoteId, string questionNote, out int procResult)
        {
            var observationIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ObservationId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = observationId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!observationId.HasValue)
                observationIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var tracerQuestionAnswerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionAnswerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionAnswerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionAnswerId.HasValue)
                tracerQuestionAnswerIdParam.Value = System.DBNull.Value;

            var numeratorParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Numerator", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = numerator.GetValueOrDefault(), Precision = 10, Scale = 2 };
            if (!numerator.HasValue)
                numeratorParam.Value = System.DBNull.Value;

            var denominatorParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Denominator", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = denominator.GetValueOrDefault(), Precision = 10, Scale = 2 };
            if (!denominator.HasValue)
                denominatorParam.Value = System.DBNull.Value;

            var questionAnswerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionAnswer", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionAnswer.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionAnswer.HasValue)
                questionAnswerParam.Value = System.DBNull.Value;

            var questionNoteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionNoteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionNoteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionNoteId.HasValue)
                questionNoteIdParam.Value = System.DBNull.Value;

            var questionNoteParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionNote", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = questionNote, Size = 3000 };
            if (questionNoteParam.Value == null)
                questionNoteParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMobileUpdateTracerQuestionAnswerReturnModel>("EXEC @procResult = [dbo].[apiMobileUpdateTracerQuestionAnswer] @ObservationId, @UserID, @TracerQuestionID, @TracerQuestionAnswerID, @Numerator, @Denominator, @QuestionAnswer, @QuestionNoteID, @QuestionNote", observationIdParam, userIdParam, tracerQuestionIdParam, tracerQuestionAnswerIdParam, numeratorParam, denominatorParam, questionAnswerParam, questionNoteIdParam, questionNoteParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMobileUpdateTracerQuestionAnswerReturnModel>> ApiMobileUpdateTracerQuestionAnswerAsync(int? observationId, int? userId, int? tracerQuestionId, int? tracerQuestionAnswerId, decimal? numerator, decimal? denominator, int? questionAnswer, int? questionNoteId, string questionNote)
        {
            var observationIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ObservationId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = observationId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!observationId.HasValue)
                observationIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var tracerQuestionAnswerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionAnswerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionAnswerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionAnswerId.HasValue)
                tracerQuestionAnswerIdParam.Value = System.DBNull.Value;

            var numeratorParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Numerator", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = numerator.GetValueOrDefault(), Precision = 10, Scale = 2 };
            if (!numerator.HasValue)
                numeratorParam.Value = System.DBNull.Value;

            var denominatorParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Denominator", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = denominator.GetValueOrDefault(), Precision = 10, Scale = 2 };
            if (!denominator.HasValue)
                denominatorParam.Value = System.DBNull.Value;

            var questionAnswerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionAnswer", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionAnswer.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionAnswer.HasValue)
                questionAnswerParam.Value = System.DBNull.Value;

            var questionNoteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionNoteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionNoteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionNoteId.HasValue)
                questionNoteIdParam.Value = System.DBNull.Value;

            var questionNoteParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionNote", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = questionNote, Size = 3000 };
            if (questionNoteParam.Value == null)
                questionNoteParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMobileUpdateTracerQuestionAnswerReturnModel>("EXEC [dbo].[apiMobileUpdateTracerQuestionAnswer] @ObservationId, @UserID, @TracerQuestionID, @TracerQuestionAnswerID, @Numerator, @Denominator, @QuestionAnswer, @QuestionNoteID, @QuestionNote", observationIdParam, userIdParam, tracerQuestionIdParam, tracerQuestionAnswerIdParam, numeratorParam, denominatorParam, questionAnswerParam, questionNoteIdParam, questionNoteParam).ToListAsync();

            return procResultData;
        }

        public int ApiMobileUpdateTracerResponseStatus(int? tracerResponseId, int? tracerResponseStatusId)
        {
            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var tracerResponseStatusIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseStatusID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseStatusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseStatusId.HasValue)
                tracerResponseStatusIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiMobileUpdateTracerResponseStatus] @TracerResponseID, @TracerResponseStatusID", tracerResponseIdParam, tracerResponseStatusIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiMobileValidateGuestUserReturnModel> ApiMobileValidateGuestUser(string userLogin, int? siteId)
        {
            int procResult;
            return ApiMobileValidateGuestUser(userLogin, siteId, out procResult);
        }

        public System.Collections.Generic.List<ApiMobileValidateGuestUserReturnModel> ApiMobileValidateGuestUser(string userLogin, int? siteId, out int procResult)
        {
            var userLoginParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogin", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogin, Size = 100 };
            if (userLoginParam.Value == null)
                userLoginParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMobileValidateGuestUserReturnModel>("EXEC @procResult = [dbo].[apiMobileValidateGuestUser] @UserLogin, @SiteID", userLoginParam, siteIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMobileValidateGuestUserReturnModel>> ApiMobileValidateGuestUserAsync(string userLogin, int? siteId)
        {
            var userLoginParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogin", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogin, Size = 100 };
            if (userLoginParam.Value == null)
                userLoginParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMobileValidateGuestUserReturnModel>("EXEC [dbo].[apiMobileValidateGuestUser] @UserLogin, @SiteID", userLoginParam, siteIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMobileValidateTracerGuestUserReturnModel> ApiMobileValidateTracerGuestUser(string userLogin)
        {
            int procResult;
            return ApiMobileValidateTracerGuestUser(userLogin, out procResult);
        }

        public System.Collections.Generic.List<ApiMobileValidateTracerGuestUserReturnModel> ApiMobileValidateTracerGuestUser(string userLogin, out int procResult)
        {
            var userLoginParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogin", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogin, Size = 50 };
            if (userLoginParam.Value == null)
                userLoginParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMobileValidateTracerGuestUserReturnModel>("EXEC @procResult = [dbo].[apiMobileValidateTracerGuestUser] @UserLogin", userLoginParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMobileValidateTracerGuestUserReturnModel>> ApiMobileValidateTracerGuestUserAsync(string userLogin)
        {
            var userLoginParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogin", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogin, Size = 50 };
            if (userLoginParam.Value == null)
                userLoginParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMobileValidateTracerGuestUserReturnModel>("EXEC [dbo].[apiMobileValidateTracerGuestUser] @UserLogin", userLoginParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMsGetAllCorpSettingsByUserIdReturnModel> ApiMsGetAllCorpSettingsByUserId(int? userId)
        {
            int procResult;
            return ApiMsGetAllCorpSettingsByUserId(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiMsGetAllCorpSettingsByUserIdReturnModel> ApiMsGetAllCorpSettingsByUserId(int? userId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMsGetAllCorpSettingsByUserIdReturnModel>("EXEC @procResult = [dbo].[apiMSGetAllCorpSettingsByUserID] @UserID", userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMsGetAllCorpSettingsByUserIdReturnModel>> ApiMsGetAllCorpSettingsByUserIdAsync(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMsGetAllCorpSettingsByUserIdReturnModel>("EXEC [dbo].[apiMSGetAllCorpSettingsByUserID] @UserID", userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMsGetWorkFlowsReturnModel> ApiMsGetWorkFlows()
        {
            int procResult;
            return ApiMsGetWorkFlows(out procResult);
        }

        public System.Collections.Generic.List<ApiMsGetWorkFlowsReturnModel> ApiMsGetWorkFlows(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMsGetWorkFlowsReturnModel>("EXEC @procResult = [dbo].[apiMSGetWorkFlows] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMsGetWorkFlowsReturnModel>> ApiMsGetWorkFlowsAsync()
        {
            var procResultData = await Database.SqlQuery<ApiMsGetWorkFlowsReturnModel>("EXEC [dbo].[apiMSGetWorkFlows] ").ToListAsync();

            return procResultData;
        }

        public int ApiMsUpdateWorkFlow(int? mockSurveyWorkFlowId, int? userId, string siteIDs)
        {
            var mockSurveyWorkFlowIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MockSurveyWorkFlowID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mockSurveyWorkFlowId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mockSurveyWorkFlowId.HasValue)
                mockSurveyWorkFlowIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteIDs", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = siteIDs, Size = -1 };
            if (siteIDsParam.Value == null)
                siteIDsParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiMSUpdateWorkFlow] @MockSurveyWorkFlowID, @UserID, @SiteIDs", mockSurveyWorkFlowIdParam, userIdParam, siteIDsParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiMultisiteAuditInsert(int? tracerCustomId, int? siteId, int? userId, string msg)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var msgParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Msg", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = msg, Size = 1000 };
            if (msgParam.Value == null)
                msgParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiMultisiteAuditInsert] @TracerCustomID, @SiteID, @UserID, @Msg", tracerCustomIdParam, siteIdParam, userIdParam, msgParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiMultisiteCopyReturnModel> ApiMultisiteCopy(string selectedSites, int? tracerId, bool? isLocked, int? userId)
        {
            int procResult;
            return ApiMultisiteCopy(selectedSites, tracerId, isLocked, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiMultisiteCopyReturnModel> ApiMultisiteCopy(string selectedSites, int? tracerId, bool? isLocked, int? userId, out int procResult)
        {
            var selectedSitesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SelectedSites", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = selectedSites, Size = 3000 };
            if (selectedSitesParam.Value == null)
                selectedSitesParam.Value = System.DBNull.Value;

            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var isLockedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsLocked", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isLocked.GetValueOrDefault() };
            if (!isLocked.HasValue)
                isLockedParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMultisiteCopyReturnModel>("EXEC @procResult = [dbo].[apiMultisiteCopy] @SelectedSites, @TracerID, @IsLocked, @UserID", selectedSitesParam, tracerIdParam, isLockedParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMultisiteCopyReturnModel>> ApiMultisiteCopyAsync(string selectedSites, int? tracerId, bool? isLocked, int? userId)
        {
            var selectedSitesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SelectedSites", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = selectedSites, Size = 3000 };
            if (selectedSitesParam.Value == null)
                selectedSitesParam.Value = System.DBNull.Value;

            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var isLockedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsLocked", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isLocked.GetValueOrDefault() };
            if (!isLocked.HasValue)
                isLockedParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMultisiteCopyReturnModel>("EXEC [dbo].[apiMultisiteCopy] @SelectedSites, @TracerID, @IsLocked, @UserID", selectedSitesParam, tracerIdParam, isLockedParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMultisiteDeleteReturnModel> ApiMultisiteDelete(string sites, int? tracerId, int? userId)
        {
            int procResult;
            return ApiMultisiteDelete(sites, tracerId, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiMultisiteDeleteReturnModel> ApiMultisiteDelete(string sites, int? tracerId, int? userId, out int procResult)
        {
            var sitesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Sites", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sites, Size = 3000 };
            if (sitesParam.Value == null)
                sitesParam.Value = System.DBNull.Value;

            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMultisiteDeleteReturnModel>("EXEC @procResult = [dbo].[apiMultisiteDelete] @Sites, @TracerID, @UserID", sitesParam, tracerIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMultisiteDeleteReturnModel>> ApiMultisiteDeleteAsync(string sites, int? tracerId, int? userId)
        {
            var sitesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Sites", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sites, Size = 3000 };
            if (sitesParam.Value == null)
                sitesParam.Value = System.DBNull.Value;

            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMultisiteDeleteReturnModel>("EXEC [dbo].[apiMultisiteDelete] @Sites, @TracerID, @UserID", sitesParam, tracerIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiMultiSiteFindDifferencesReturnModel> ApiMultiSiteFindDifferences(int? parentId, int? childId, int? userId, bool? lockOnExactMatch)
        {
            int procResult;
            return ApiMultiSiteFindDifferences(parentId, childId, userId, lockOnExactMatch, out procResult);
        }

        public System.Collections.Generic.List<ApiMultiSiteFindDifferencesReturnModel> ApiMultiSiteFindDifferences(int? parentId, int? childId, int? userId, bool? lockOnExactMatch, out int procResult)
        {
            var parentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ParentID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = parentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!parentId.HasValue)
                parentIdParam.Value = System.DBNull.Value;

            var childIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ChildID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = childId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!childId.HasValue)
                childIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var lockOnExactMatchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LockOnExactMatch", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = lockOnExactMatch.GetValueOrDefault() };
            if (!lockOnExactMatch.HasValue)
                lockOnExactMatchParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiMultiSiteFindDifferencesReturnModel>("EXEC @procResult = [dbo].[apiMultiSiteFindDifferences] @ParentID, @ChildID, @UserID, @LockOnExactMatch", parentIdParam, childIdParam, userIdParam, lockOnExactMatchParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiMultiSiteFindDifferencesReturnModel>> ApiMultiSiteFindDifferencesAsync(int? parentId, int? childId, int? userId, bool? lockOnExactMatch)
        {
            var parentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ParentID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = parentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!parentId.HasValue)
                parentIdParam.Value = System.DBNull.Value;

            var childIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ChildID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = childId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!childId.HasValue)
                childIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var lockOnExactMatchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LockOnExactMatch", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = lockOnExactMatch.GetValueOrDefault() };
            if (!lockOnExactMatch.HasValue)
                lockOnExactMatchParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiMultiSiteFindDifferencesReturnModel>("EXEC [dbo].[apiMultiSiteFindDifferences] @ParentID, @ChildID, @UserID, @LockOnExactMatch", parentIdParam, childIdParam, userIdParam, lockOnExactMatchParam).ToListAsync();

            return procResultData;
        }

        public int ApiOptOutOfSystemTracers(int? tracerId, int? userId)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiOptOutOfSystemTracers] @TracerID, @UserID", tracerIdParam, userIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiPublishTracer(int? tracerId, int? updatedById)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var updatedByIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedById.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedById.HasValue)
                updatedByIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiPublishTracer] @TracerID, @UpdatedByID", tracerIdParam, updatedByIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiReAssignTask(string lstTaskIDs, int? assignedToUserId, string ccUserIDs, string dueDate, int? updatedByUserId)
        {
            var lstTaskIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LstTaskIDs", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lstTaskIDs, Size = -1 };
            if (lstTaskIDsParam.Value == null)
                lstTaskIDsParam.Value = System.DBNull.Value;

            var assignedToUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AssignedToUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = assignedToUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!assignedToUserId.HasValue)
                assignedToUserIdParam.Value = System.DBNull.Value;

            var ccUserIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CCUserIDs", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ccUserIDs, Size = -1 };
            if (ccUserIDsParam.Value == null)
                ccUserIDsParam.Value = System.DBNull.Value;

            var dueDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DueDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = dueDate, Size = 10 };
            if (dueDateParam.Value == null)
                dueDateParam.Value = System.DBNull.Value;

            var updatedByUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedByUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedByUserId.HasValue)
                updatedByUserIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiReAssignTask] @LstTaskIDs, @AssignedToUserID, @CCUserIDs, @DueDate, @UpdatedByUserID", lstTaskIDsParam, assignedToUserIdParam, ccUserIDsParam, dueDateParam, updatedByUserIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiReportTracerObservationReturnModel> ApiReportTracerObservation(string customTracerIdFilter, out int? customSections)
        {
            int procResult;
            return ApiReportTracerObservation(customTracerIdFilter, out customSections, out procResult);
        }

        public System.Collections.Generic.List<ApiReportTracerObservationReturnModel> ApiReportTracerObservation(string customTracerIdFilter, out int? customSections, out int procResult)
        {
            var customTracerIdFilterParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CustomTracerIDFilter", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = customTracerIdFilter, Size = 1000 };
            if (customTracerIdFilterParam.Value == null)
                customTracerIdFilterParam.Value = System.DBNull.Value;

            var customSectionsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CustomSections", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiReportTracerObservationReturnModel>("EXEC @procResult = [dbo].[apiReportTracerObservation] @CustomTracerIDFilter, @CustomSections OUTPUT", customTracerIdFilterParam, customSectionsParam, procResultParam).ToList();
            if (IsSqlParameterNull(customSectionsParam))
                customSections = null;
            else
                customSections = (int) customSectionsParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public ApiReportTracerObservationDetailReturnModel ApiReportTracerObservationDetail(int? tracerResponseId, int? programId, int? cycleId, int? isErrorOnly, out int? customSections)
        {
            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var cycleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CycleID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = cycleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!cycleId.HasValue)
                cycleIdParam.Value = System.DBNull.Value;

            var isErrorOnlyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsErrorOnly", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = isErrorOnly.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isErrorOnly.HasValue)
                isErrorOnlyParam.Value = System.DBNull.Value;

            var customSectionsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CustomSections", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            if (IsSqlParameterNull(customSectionsParam))
                customSections = null;
            else
                customSections = (int) customSectionsParam.Value;

            var procResultData = new ApiReportTracerObservationDetailReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiReportTracerObservationDetail]";
            cmd.Parameters.Add(tracerResponseIdParam);
            cmd.Parameters.Add(programIdParam);
            cmd.Parameters.Add(cycleIdParam);
            cmd.Parameters.Add(isErrorOnlyParam);
            cmd.Parameters.Add(customSectionsParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiReportTracerObservationDetailReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ApiReportTracerObservationDetailReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();
            if (IsSqlParameterNull(customSectionsParam))
                customSections = null;
            else
                customSections = (int) customSectionsParam.Value;

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<ApiReportTracerObservationHeaderReturnModel> ApiReportTracerObservationHeader(int? tracerResponseId, int? siteId, int? programId)
        {
            int procResult;
            return ApiReportTracerObservationHeader(tracerResponseId, siteId, programId, out procResult);
        }

        public System.Collections.Generic.List<ApiReportTracerObservationHeaderReturnModel> ApiReportTracerObservationHeader(int? tracerResponseId, int? siteId, int? programId, out int procResult)
        {
            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiReportTracerObservationHeaderReturnModel>("EXEC @procResult = [dbo].[apiReportTracerObservationHeader] @TracerResponseID, @SiteID, @ProgramID", tracerResponseIdParam, siteIdParam, programIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiReportTracerObservationHeaderReturnModel>> ApiReportTracerObservationHeaderAsync(int? tracerResponseId, int? siteId, int? programId)
        {
            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiReportTracerObservationHeaderReturnModel>("EXEC [dbo].[apiReportTracerObservationHeader] @TracerResponseID, @SiteID, @ProgramID", tracerResponseIdParam, siteIdParam, programIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiResponsesSelectByTracerIdReturnModel> ApiResponsesSelectByTracerId(int? tracerId, string responseStatusCsv)
        {
            int procResult;
            return ApiResponsesSelectByTracerId(tracerId, responseStatusCsv, out procResult);
        }

        public System.Collections.Generic.List<ApiResponsesSelectByTracerIdReturnModel> ApiResponsesSelectByTracerId(int? tracerId, string responseStatusCsv, out int procResult)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var responseStatusCsvParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ResponseStatusCSV", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = responseStatusCsv, Size = 100 };
            if (responseStatusCsvParam.Value == null)
                responseStatusCsvParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiResponsesSelectByTracerIdReturnModel>("EXEC @procResult = [dbo].[apiResponsesSelectByTracerId] @TracerID, @ResponseStatusCSV", tracerIdParam, responseStatusCsvParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiResponsesSelectByTracerIdReturnModel>> ApiResponsesSelectByTracerIdAsync(int? tracerId, string responseStatusCsv)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var responseStatusCsvParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ResponseStatusCSV", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = responseStatusCsv, Size = 100 };
            if (responseStatusCsvParam.Value == null)
                responseStatusCsvParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiResponsesSelectByTracerIdReturnModel>("EXEC [dbo].[apiResponsesSelectByTracerId] @TracerID, @ResponseStatusCSV", tracerIdParam, responseStatusCsvParam).ToListAsync();

            return procResultData;
        }

        public int ApiSaveSiteProgramPreference(int? userId, int? siteId, int? programId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiSaveSiteProgramPreference] @UserID, @SiteID, @ProgramID", userIdParam, siteIdParam, programIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiSaveTracerCategoryReturnModel> ApiSaveTracerCategory(int? tracerCategoryId, string tracerCategoryName, int? siteId, int? updatedById, bool? skipParentCategorySave)
        {
            int procResult;
            return ApiSaveTracerCategory(tracerCategoryId, tracerCategoryName, siteId, updatedById, skipParentCategorySave, out procResult);
        }

        public System.Collections.Generic.List<ApiSaveTracerCategoryReturnModel> ApiSaveTracerCategory(int? tracerCategoryId, string tracerCategoryName, int? siteId, int? updatedById, bool? skipParentCategorySave, out int procResult)
        {
            var tracerCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCategoryId.HasValue)
                tracerCategoryIdParam.Value = System.DBNull.Value;

            var tracerCategoryNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCategoryName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = tracerCategoryName, Size = 100 };
            if (tracerCategoryNameParam.Value == null)
                tracerCategoryNameParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var updatedByIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedById.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedById.HasValue)
                updatedByIdParam.Value = System.DBNull.Value;

            var skipParentCategorySaveParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SkipParentCategorySave", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = skipParentCategorySave.GetValueOrDefault() };
            if (!skipParentCategorySave.HasValue)
                skipParentCategorySaveParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSaveTracerCategoryReturnModel>("EXEC @procResult = [dbo].[apiSaveTracerCategory] @TracerCategoryID, @TracerCategoryName, @SiteID, @UpdatedByID, @SkipParentCategorySave", tracerCategoryIdParam, tracerCategoryNameParam, siteIdParam, updatedByIdParam, skipParentCategorySaveParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSaveTracerCategoryReturnModel>> ApiSaveTracerCategoryAsync(int? tracerCategoryId, string tracerCategoryName, int? siteId, int? updatedById, bool? skipParentCategorySave)
        {
            var tracerCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCategoryId.HasValue)
                tracerCategoryIdParam.Value = System.DBNull.Value;

            var tracerCategoryNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCategoryName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = tracerCategoryName, Size = 100 };
            if (tracerCategoryNameParam.Value == null)
                tracerCategoryNameParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var updatedByIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedById.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedById.HasValue)
                updatedByIdParam.Value = System.DBNull.Value;

            var skipParentCategorySaveParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SkipParentCategorySave", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = skipParentCategorySave.GetValueOrDefault() };
            if (!skipParentCategorySave.HasValue)
                skipParentCategorySaveParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSaveTracerCategoryReturnModel>("EXEC [dbo].[apiSaveTracerCategory] @TracerCategoryID, @TracerCategoryName, @SiteID, @UpdatedByID, @SkipParentCategorySave", tracerCategoryIdParam, tracerCategoryNameParam, siteIdParam, updatedByIdParam, skipParentCategorySaveParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiSelectGuestAccessDomainBySiteReturnModel> ApiSelectGuestAccessDomainBySite(int? siteId)
        {
            int procResult;
            return ApiSelectGuestAccessDomainBySite(siteId, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectGuestAccessDomainBySiteReturnModel> ApiSelectGuestAccessDomainBySite(int? siteId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSelectGuestAccessDomainBySiteReturnModel>("EXEC @procResult = [dbo].[apiSelectGuestAccessDomainBySite] @SiteID", siteIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectGuestAccessDomainBySiteReturnModel>> ApiSelectGuestAccessDomainBySiteAsync(int? siteId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSelectGuestAccessDomainBySiteReturnModel>("EXEC [dbo].[apiSelectGuestAccessDomainBySite] @SiteID", siteIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiSelectGuestAccessSettingsBySiteReturnModel> ApiSelectGuestAccessSettingsBySite(int? siteId)
        {
            int procResult;
            return ApiSelectGuestAccessSettingsBySite(siteId, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectGuestAccessSettingsBySiteReturnModel> ApiSelectGuestAccessSettingsBySite(int? siteId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSelectGuestAccessSettingsBySiteReturnModel>("EXEC @procResult = [dbo].[apiSelectGuestAccessSettingsBySite] @SiteID", siteIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectGuestAccessSettingsBySiteReturnModel>> ApiSelectGuestAccessSettingsBySiteAsync(int? siteId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSelectGuestAccessSettingsBySiteReturnModel>("EXEC [dbo].[apiSelectGuestAccessSettingsBySite] @SiteID", siteIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiSelectProgramsBySiteReturnModel> ApiSelectProgramsBySite(int? userId, int? siteId, System.DateTime? standardEffBeginDate, int? productId)
        {
            int procResult;
            return ApiSelectProgramsBySite(userId, siteId, standardEffBeginDate, productId, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectProgramsBySiteReturnModel> ApiSelectProgramsBySite(int? userId, int? siteId, System.DateTime? standardEffBeginDate, int? productId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var standardEffBeginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffBeginDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = standardEffBeginDate.GetValueOrDefault() };
            if (!standardEffBeginDate.HasValue)
                standardEffBeginDateParam.Value = System.DBNull.Value;

            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSelectProgramsBySiteReturnModel>("EXEC @procResult = [dbo].[apiSelectProgramsBySite] @UserID, @SiteID, @StandardEffBeginDate, @ProductID", userIdParam, siteIdParam, standardEffBeginDateParam, productIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectProgramsBySiteReturnModel>> ApiSelectProgramsBySiteAsync(int? userId, int? siteId, System.DateTime? standardEffBeginDate, int? productId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var standardEffBeginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffBeginDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = standardEffBeginDate.GetValueOrDefault() };
            if (!standardEffBeginDate.HasValue)
                standardEffBeginDateParam.Value = System.DBNull.Value;

            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSelectProgramsBySiteReturnModel>("EXEC [dbo].[apiSelectProgramsBySite] @UserID, @SiteID, @StandardEffBeginDate, @ProductID", userIdParam, siteIdParam, standardEffBeginDateParam, productIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiSelectProgramsBySiteUserReturnModel> ApiSelectProgramsBySiteUser(int? siteId, System.DateTime? standardEffBeginDate, int? productId)
        {
            int procResult;
            return ApiSelectProgramsBySiteUser(siteId, standardEffBeginDate, productId, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectProgramsBySiteUserReturnModel> ApiSelectProgramsBySiteUser(int? siteId, System.DateTime? standardEffBeginDate, int? productId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var standardEffBeginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffBeginDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = standardEffBeginDate.GetValueOrDefault() };
            if (!standardEffBeginDate.HasValue)
                standardEffBeginDateParam.Value = System.DBNull.Value;

            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSelectProgramsBySiteUserReturnModel>("EXEC @procResult = [dbo].[apiSelectProgramsBySiteUser] @SiteID, @StandardEffBeginDate, @ProductID", siteIdParam, standardEffBeginDateParam, productIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectProgramsBySiteUserReturnModel>> ApiSelectProgramsBySiteUserAsync(int? siteId, System.DateTime? standardEffBeginDate, int? productId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var standardEffBeginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StandardEffBeginDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = standardEffBeginDate.GetValueOrDefault() };
            if (!standardEffBeginDate.HasValue)
                standardEffBeginDateParam.Value = System.DBNull.Value;

            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSelectProgramsBySiteUserReturnModel>("EXEC [dbo].[apiSelectProgramsBySiteUser] @SiteID, @StandardEffBeginDate, @ProductID", siteIdParam, standardEffBeginDateParam, productIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiSelectSiteAttributeMapReturnModel> ApiSelectSiteAttributeMap(int? siteId, string attributeList)
        {
            int procResult;
            return ApiSelectSiteAttributeMap(siteId, attributeList, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectSiteAttributeMapReturnModel> ApiSelectSiteAttributeMap(int? siteId, string attributeList, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var attributeListParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeList", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = attributeList, Size = 250 };
            if (attributeListParam.Value == null)
                attributeListParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSelectSiteAttributeMapReturnModel>("EXEC @procResult = [dbo].[apiSelectSiteAttributeMap] @SiteID, @AttributeList", siteIdParam, attributeListParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectSiteAttributeMapReturnModel>> ApiSelectSiteAttributeMapAsync(int? siteId, string attributeList)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var attributeListParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeList", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = attributeList, Size = 250 };
            if (attributeListParam.Value == null)
                attributeListParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSelectSiteAttributeMapReturnModel>("EXEC [dbo].[apiSelectSiteAttributeMap] @SiteID, @AttributeList", siteIdParam, attributeListParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiSelectTracerSiteByTracerCustomIdReturnModel> ApiSelectTracerSiteByTracerCustomId(int? tracerCustomId)
        {
            int procResult;
            return ApiSelectTracerSiteByTracerCustomId(tracerCustomId, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectTracerSiteByTracerCustomIdReturnModel> ApiSelectTracerSiteByTracerCustomId(int? tracerCustomId, out int procResult)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSelectTracerSiteByTracerCustomIdReturnModel>("EXEC @procResult = [dbo].[apiSelectTracerSiteByTracerCustomID] @TracerCustomID", tracerCustomIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectTracerSiteByTracerCustomIdReturnModel>> ApiSelectTracerSiteByTracerCustomIdAsync(int? tracerCustomId)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSelectTracerSiteByTracerCustomIdReturnModel>("EXEC [dbo].[apiSelectTracerSiteByTracerCustomID] @TracerCustomID", tracerCustomIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiSelectUserByUserLogonIdReturnModel> ApiSelectUserByUserLogonId(string userLogonId)
        {
            int procResult;
            return ApiSelectUserByUserLogonId(userLogonId, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectUserByUserLogonIdReturnModel> ApiSelectUserByUserLogonId(string userLogonId, out int procResult)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 50 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSelectUserByUserLogonIdReturnModel>("EXEC @procResult = [dbo].[apiSelectUserByUserLogonID] @UserLogonID", userLogonIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectUserByUserLogonIdReturnModel>> ApiSelectUserByUserLogonIdAsync(string userLogonId)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 50 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSelectUserByUserLogonIdReturnModel>("EXEC [dbo].[apiSelectUserByUserLogonID] @UserLogonID", userLogonIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiSetDefaultTracerCategoryForSiteReturnModel> ApiSetDefaultTracerCategoryForSite(int? tracerCategoryId, int? siteId, int? updatedById)
        {
            int procResult;
            return ApiSetDefaultTracerCategoryForSite(tracerCategoryId, siteId, updatedById, out procResult);
        }

        public System.Collections.Generic.List<ApiSetDefaultTracerCategoryForSiteReturnModel> ApiSetDefaultTracerCategoryForSite(int? tracerCategoryId, int? siteId, int? updatedById, out int procResult)
        {
            var tracerCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCategoryId.HasValue)
                tracerCategoryIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var updatedByIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedById.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedById.HasValue)
                updatedByIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSetDefaultTracerCategoryForSiteReturnModel>("EXEC @procResult = [dbo].[apiSetDefaultTracerCategoryForSite] @TracerCategoryID, @SiteID, @UpdatedByID", tracerCategoryIdParam, siteIdParam, updatedByIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSetDefaultTracerCategoryForSiteReturnModel>> ApiSetDefaultTracerCategoryForSiteAsync(int? tracerCategoryId, int? siteId, int? updatedById)
        {
            var tracerCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCategoryId.HasValue)
                tracerCategoryIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var updatedByIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedById.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedById.HasValue)
                updatedByIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSetDefaultTracerCategoryForSiteReturnModel>("EXEC [dbo].[apiSetDefaultTracerCategoryForSite] @TracerCategoryID, @SiteID, @UpdatedByID", tracerCategoryIdParam, siteIdParam, updatedByIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiSitesNoLongerAuthorizedToAccessReturnModel> ApiSitesNoLongerAuthorizedToAccess(int? tracerId, int? userId)
        {
            int procResult;
            return ApiSitesNoLongerAuthorizedToAccess(tracerId, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiSitesNoLongerAuthorizedToAccessReturnModel> ApiSitesNoLongerAuthorizedToAccess(int? tracerId, int? userId, out int procResult)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSitesNoLongerAuthorizedToAccessReturnModel>("EXEC @procResult = [dbo].[apiSitesNoLongerAuthorizedToAccess] @TracerID, @UserID", tracerIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSitesNoLongerAuthorizedToAccessReturnModel>> ApiSitesNoLongerAuthorizedToAccessAsync(int? tracerId, int? userId)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSitesNoLongerAuthorizedToAccessReturnModel>("EXEC [dbo].[apiSitesNoLongerAuthorizedToAccess] @TracerID, @UserID", tracerIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiTracerDetailSelectBySiteProgramStatusReturnModel> ApiTracerDetailSelectBySiteProgramStatus(int? siteId, int? programId, int? statusId)
        {
            int procResult;
            return ApiTracerDetailSelectBySiteProgramStatus(siteId, programId, statusId, out procResult);
        }

        public System.Collections.Generic.List<ApiTracerDetailSelectBySiteProgramStatusReturnModel> ApiTracerDetailSelectBySiteProgramStatus(int? siteId, int? programId, int? statusId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var statusIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StatusID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = statusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!statusId.HasValue)
                statusIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiTracerDetailSelectBySiteProgramStatusReturnModel>("EXEC @procResult = [dbo].[apiTracerDetailSelectBySiteProgramStatus] @SiteID, @ProgramID, @StatusID", siteIdParam, programIdParam, statusIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiTracerDetailSelectBySiteProgramStatusReturnModel>> ApiTracerDetailSelectBySiteProgramStatusAsync(int? siteId, int? programId, int? statusId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var statusIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StatusID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = statusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!statusId.HasValue)
                statusIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiTracerDetailSelectBySiteProgramStatusReturnModel>("EXEC [dbo].[apiTracerDetailSelectBySiteProgramStatus] @SiteID, @ProgramID, @StatusID", siteIdParam, programIdParam, statusIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiTracersBySiteProgramStatusReturnModel> ApiTracersBySiteProgramStatus(int? siteId, int? programId, int? statusId, int? userId)
        {
            int procResult;
            return ApiTracersBySiteProgramStatus(siteId, programId, statusId, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiTracersBySiteProgramStatusReturnModel> ApiTracersBySiteProgramStatus(int? siteId, int? programId, int? statusId, int? userId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var statusIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StatusID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = statusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!statusId.HasValue)
                statusIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiTracersBySiteProgramStatusReturnModel>("EXEC @procResult = [dbo].[apiTracersBySiteProgramStatus] @SiteID, @ProgramID, @StatusID, @UserID", siteIdParam, programIdParam, statusIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiTracersBySiteProgramStatusReturnModel>> ApiTracersBySiteProgramStatusAsync(int? siteId, int? programId, int? statusId, int? userId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var statusIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StatusID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = statusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!statusId.HasValue)
                statusIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiTracersBySiteProgramStatusReturnModel>("EXEC [dbo].[apiTracersBySiteProgramStatus] @SiteID, @ProgramID, @StatusID, @UserID", siteIdParam, programIdParam, statusIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiUnlockedMasterValidationReturnModel> ApiUnlockedMasterValidation(int? tracerId, int? userId)
        {
            int procResult;
            return ApiUnlockedMasterValidation(tracerId, userId, out procResult);
        }

        public System.Collections.Generic.List<ApiUnlockedMasterValidationReturnModel> ApiUnlockedMasterValidation(int? tracerId, int? userId, out int procResult)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiUnlockedMasterValidationReturnModel>("EXEC @procResult = [dbo].[apiUnlockedMasterValidation] @TracerID, @UserID", tracerIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiUnlockedMasterValidationReturnModel>> ApiUnlockedMasterValidationAsync(int? tracerId, int? userId)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiUnlockedMasterValidationReturnModel>("EXEC [dbo].[apiUnlockedMasterValidation] @TracerID, @UserID", tracerIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public int ApiUnpublishTracer(int? tracerId, int? updatedById)
        {
            var tracerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerId.HasValue)
                tracerIdParam.Value = System.DBNull.Value;

            var updatedByIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedById.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedById.HasValue)
                updatedByIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiUnpublishTracer] @TracerID, @UpdatedByID", tracerIdParam, updatedByIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiUpdateSelectPasscodeReturnModel> ApiUpdateSelectPasscode(int? userId, int? createdByUserId, int? passcode)
        {
            int procResult;
            return ApiUpdateSelectPasscode(userId, createdByUserId, passcode, out procResult);
        }

        public System.Collections.Generic.List<ApiUpdateSelectPasscodeReturnModel> ApiUpdateSelectPasscode(int? userId, int? createdByUserId, int? passcode, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var createdByUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatedByUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = createdByUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!createdByUserId.HasValue)
                createdByUserIdParam.Value = System.DBNull.Value;

            var passcodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Passcode", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = passcode.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!passcode.HasValue)
                passcodeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiUpdateSelectPasscodeReturnModel>("EXEC @procResult = [dbo].[apiUpdateSelectPasscode] @UserID, @CreatedByUserID, @Passcode", userIdParam, createdByUserIdParam, passcodeParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiUpdateSelectPasscodeReturnModel>> ApiUpdateSelectPasscodeAsync(int? userId, int? createdByUserId, int? passcode)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var createdByUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatedByUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = createdByUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!createdByUserId.HasValue)
                createdByUserIdParam.Value = System.DBNull.Value;

            var passcodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Passcode", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = passcode.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!passcode.HasValue)
                passcodeParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiUpdateSelectPasscodeReturnModel>("EXEC [dbo].[apiUpdateSelectPasscode] @UserID, @CreatedByUserID, @Passcode", userIdParam, createdByUserIdParam, passcodeParam).ToListAsync();

            return procResultData;
        }

        public int ApiUpdateSiteEmailNotificationSettings(int? siteId, bool? sendEmailOnTaskCreation, bool? sendEmailBeforeTaskDue, int? daysBeforeTaskDue, bool? sendEmailsAfterTaskDue, int? daysAfterTaskDue, bool? sendRemainderEmailAfterTaskDue, bool? sendTaskReportToCc, int? taskReportToCcScheduleTypeId, bool? sendTaskReportToUsers, int? taskReportToUsersScheduleTypeId, string taskReportRecipients, bool? sendEmailOnAssigningEp, int? taskDueRecipientType, int? updatedByUserId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var sendEmailOnTaskCreationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SendEmailOnTaskCreation", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = sendEmailOnTaskCreation.GetValueOrDefault() };
            if (!sendEmailOnTaskCreation.HasValue)
                sendEmailOnTaskCreationParam.Value = System.DBNull.Value;

            var sendEmailBeforeTaskDueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SendEmailBeforeTaskDue", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = sendEmailBeforeTaskDue.GetValueOrDefault() };
            if (!sendEmailBeforeTaskDue.HasValue)
                sendEmailBeforeTaskDueParam.Value = System.DBNull.Value;

            var daysBeforeTaskDueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DaysBeforeTaskDue", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = daysBeforeTaskDue.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!daysBeforeTaskDue.HasValue)
                daysBeforeTaskDueParam.Value = System.DBNull.Value;

            var sendEmailsAfterTaskDueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SendEmailsAfterTaskDue", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = sendEmailsAfterTaskDue.GetValueOrDefault() };
            if (!sendEmailsAfterTaskDue.HasValue)
                sendEmailsAfterTaskDueParam.Value = System.DBNull.Value;

            var daysAfterTaskDueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DaysAfterTaskDue", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = daysAfterTaskDue.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!daysAfterTaskDue.HasValue)
                daysAfterTaskDueParam.Value = System.DBNull.Value;

            var sendRemainderEmailAfterTaskDueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SendRemainderEmailAfterTaskDue", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = sendRemainderEmailAfterTaskDue.GetValueOrDefault() };
            if (!sendRemainderEmailAfterTaskDue.HasValue)
                sendRemainderEmailAfterTaskDueParam.Value = System.DBNull.Value;

            var sendTaskReportToCcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SendTaskReportToCC", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = sendTaskReportToCc.GetValueOrDefault() };
            if (!sendTaskReportToCc.HasValue)
                sendTaskReportToCcParam.Value = System.DBNull.Value;

            var taskReportToCcScheduleTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskReportToCCScheduleTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = taskReportToCcScheduleTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskReportToCcScheduleTypeId.HasValue)
                taskReportToCcScheduleTypeIdParam.Value = System.DBNull.Value;

            var sendTaskReportToUsersParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SendTaskReportToUsers", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = sendTaskReportToUsers.GetValueOrDefault() };
            if (!sendTaskReportToUsers.HasValue)
                sendTaskReportToUsersParam.Value = System.DBNull.Value;

            var taskReportToUsersScheduleTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskReportToUsersScheduleTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = taskReportToUsersScheduleTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskReportToUsersScheduleTypeId.HasValue)
                taskReportToUsersScheduleTypeIdParam.Value = System.DBNull.Value;

            var taskReportRecipientsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskReportRecipients", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = taskReportRecipients, Size = -1 };
            if (taskReportRecipientsParam.Value == null)
                taskReportRecipientsParam.Value = System.DBNull.Value;

            var sendEmailOnAssigningEpParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SendEmailOnAssigningEP", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = sendEmailOnAssigningEp.GetValueOrDefault() };
            if (!sendEmailOnAssigningEp.HasValue)
                sendEmailOnAssigningEpParam.Value = System.DBNull.Value;

            var taskDueRecipientTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskDueRecipientType", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = taskDueRecipientType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskDueRecipientType.HasValue)
                taskDueRecipientTypeParam.Value = System.DBNull.Value;

            var updatedByUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedByUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedByUserId.HasValue)
                updatedByUserIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiUpdateSiteEmailNotificationSettings] @SiteID, @SendEmailOnTaskCreation, @SendEmailBeforeTaskDue, @DaysBeforeTaskDue, @SendEmailsAfterTaskDue, @DaysAfterTaskDue, @SendRemainderEmailAfterTaskDue, @SendTaskReportToCC, @TaskReportToCCScheduleTypeID, @SendTaskReportToUsers, @TaskReportToUsersScheduleTypeID, @TaskReportRecipients, @SendEmailOnAssigningEP, @TaskDueRecipientType, @UpdatedByUserID", siteIdParam, sendEmailOnTaskCreationParam, sendEmailBeforeTaskDueParam, daysBeforeTaskDueParam, sendEmailsAfterTaskDueParam, daysAfterTaskDueParam, sendRemainderEmailAfterTaskDueParam, sendTaskReportToCcParam, taskReportToCcScheduleTypeIdParam, sendTaskReportToUsersParam, taskReportToUsersScheduleTypeIdParam, taskReportRecipientsParam, sendEmailOnAssigningEpParam, taskDueRecipientTypeParam, updatedByUserIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiUpdateTaskObservationAssoc(int? tracerResponseId, string taskIDs)
        {
            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var taskIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskIDs", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = taskIDs, Size = -1 };
            if (taskIDsParam.Value == null)
                taskIDsParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiUpdateTaskObservationAssoc] @TracerResponseID, @TaskIDs", tracerResponseIdParam, taskIDsParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiUpdateTracerCategoryForTracer(int? tracerCategoryId, int? tracerCustomId, int? updatedById)
        {
            var tracerCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCategoryId.HasValue)
                tracerCategoryIdParam.Value = System.DBNull.Value;

            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var updatedByIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedById.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedById.HasValue)
                updatedByIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiUpdateTracerCategoryForTracer] @TracerCategoryID, @TracerCustomID, @UpdatedByID", tracerCategoryIdParam, tracerCustomIdParam, updatedByIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiUpdateTracerQuestionAnswerReturnModel> ApiUpdateTracerQuestionAnswer(int? tracerQuestionId, int? tracerResponseId, int? userId, string questionNote, string questionNoteId)
        {
            int procResult;
            return ApiUpdateTracerQuestionAnswer(tracerQuestionId, tracerResponseId, userId, questionNote, questionNoteId, out procResult);
        }

        public System.Collections.Generic.List<ApiUpdateTracerQuestionAnswerReturnModel> ApiUpdateTracerQuestionAnswer(int? tracerQuestionId, int? tracerResponseId, int? userId, string questionNote, string questionNoteId, out int procResult)
        {
            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var questionNoteParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionNote", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = questionNote, Size = -1 };
            if (questionNoteParam.Value == null)
                questionNoteParam.Value = System.DBNull.Value;

            var questionNoteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionNoteID", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = questionNoteId, Size = 10 };
            if (questionNoteIdParam.Value == null)
                questionNoteIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiUpdateTracerQuestionAnswerReturnModel>("EXEC @procResult = [dbo].[apiUpdateTracerQuestionAnswer] @TracerQuestionID, @TracerResponseID, @UserID, @QuestionNote, @QuestionNoteID", tracerQuestionIdParam, tracerResponseIdParam, userIdParam, questionNoteParam, questionNoteIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiUpdateTracerQuestionAnswerReturnModel>> ApiUpdateTracerQuestionAnswerAsync(int? tracerQuestionId, int? tracerResponseId, int? userId, string questionNote, string questionNoteId)
        {
            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var questionNoteParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionNote", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = questionNote, Size = -1 };
            if (questionNoteParam.Value == null)
                questionNoteParam.Value = System.DBNull.Value;

            var questionNoteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionNoteID", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = questionNoteId, Size = 10 };
            if (questionNoteIdParam.Value == null)
                questionNoteIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiUpdateTracerQuestionAnswerReturnModel>("EXEC [dbo].[apiUpdateTracerQuestionAnswer] @TracerQuestionID, @TracerResponseID, @UserID, @QuestionNote, @QuestionNoteID", tracerQuestionIdParam, tracerResponseIdParam, userIdParam, questionNoteParam, questionNoteIdParam).ToListAsync();

            return procResultData;
        }

        public int ApiUpdateTracerStatusHistory(int? tracerCustomId, int? tracerStatusId, int? userId)
        {
            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerStatusIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerStatusID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerStatusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerStatusId.HasValue)
                tracerStatusIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiUpdateTracerStatusHistory] @TracerCustomID, @TracerStatusID, @UserID", tracerCustomIdParam, tracerStatusIdParam, userIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiUpdateUserPreference(int? userId, int? siteId, int? programId, string userPreferenceType, string preferenceValue)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var userPreferenceTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserPreferenceType", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userPreferenceType, Size = 50 };
            if (userPreferenceTypeParam.Value == null)
                userPreferenceTypeParam.Value = System.DBNull.Value;

            var preferenceValueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PreferenceValue", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = preferenceValue, Size = -1 };
            if (preferenceValueParam.Value == null)
                preferenceValueParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiUpdateUserPreference] @UserID, @SiteID, @ProgramID, @UserPreferenceType, @PreferenceValue", userIdParam, siteIdParam, programIdParam, userPreferenceTypeParam, preferenceValueParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiUpdateUserTaskReturnModel> ApiUpdateUserTask(int? taskId, string taskName, int? taskTypeId, int? siteId, int? programId, string assignedDate, int? assignedToUserId, int? assignedByUserId, string taskDetails, string ccUserIDs, string dueDate, int? taskStatus, int? updatedByUserId, int? createdByUserId, int? tracerCustomId, int? tracerResponseId, int? tracerQuestionId, int? tracerQuestionAnswerId, int? epTextId, int? cmsStandardId, bool? reminderEmailRequired, string taskResolution, string completeDate, string lstUsers)
        {
            int procResult;
            return ApiUpdateUserTask(taskId, taskName, taskTypeId, siteId, programId, assignedDate, assignedToUserId, assignedByUserId, taskDetails, ccUserIDs, dueDate, taskStatus, updatedByUserId, createdByUserId, tracerCustomId, tracerResponseId, tracerQuestionId, tracerQuestionAnswerId, epTextId, cmsStandardId, reminderEmailRequired, taskResolution, completeDate, lstUsers, out procResult);
        }

        public System.Collections.Generic.List<ApiUpdateUserTaskReturnModel> ApiUpdateUserTask(int? taskId, string taskName, int? taskTypeId, int? siteId, int? programId, string assignedDate, int? assignedToUserId, int? assignedByUserId, string taskDetails, string ccUserIDs, string dueDate, int? taskStatus, int? updatedByUserId, int? createdByUserId, int? tracerCustomId, int? tracerResponseId, int? tracerQuestionId, int? tracerQuestionAnswerId, int? epTextId, int? cmsStandardId, bool? reminderEmailRequired, string taskResolution, string completeDate, string lstUsers, out int procResult)
        {
            var taskIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = taskId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskId.HasValue)
                taskIdParam.Value = System.DBNull.Value;

            var taskNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = taskName, Size = 150 };
            if (taskNameParam.Value == null)
                taskNameParam.Value = System.DBNull.Value;

            var taskTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = taskTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskTypeId.HasValue)
                taskTypeIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var assignedDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AssignedDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = assignedDate, Size = 10 };
            if (assignedDateParam.Value == null)
                assignedDateParam.Value = System.DBNull.Value;

            var assignedToUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AssignedToUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = assignedToUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!assignedToUserId.HasValue)
                assignedToUserIdParam.Value = System.DBNull.Value;

            var assignedByUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AssignedByUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = assignedByUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!assignedByUserId.HasValue)
                assignedByUserIdParam.Value = System.DBNull.Value;

            var taskDetailsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskDetails", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = taskDetails, Size = -1 };
            if (taskDetailsParam.Value == null)
                taskDetailsParam.Value = System.DBNull.Value;

            var ccUserIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CCUserIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = ccUserIDs, Size = -1 };
            if (ccUserIDsParam.Value == null)
                ccUserIDsParam.Value = System.DBNull.Value;

            var dueDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DueDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = dueDate, Size = 10 };
            if (dueDateParam.Value == null)
                dueDateParam.Value = System.DBNull.Value;

            var taskStatusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskStatus", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = taskStatus.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskStatus.HasValue)
                taskStatusParam.Value = System.DBNull.Value;

            var updatedByUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedByUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedByUserId.HasValue)
                updatedByUserIdParam.Value = System.DBNull.Value;

            var createdByUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatedByUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = createdByUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!createdByUserId.HasValue)
                createdByUserIdParam.Value = System.DBNull.Value;

            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var tracerQuestionAnswerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionAnswerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionAnswerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionAnswerId.HasValue)
                tracerQuestionAnswerIdParam.Value = System.DBNull.Value;

            var epTextIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EPTextID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = epTextId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!epTextId.HasValue)
                epTextIdParam.Value = System.DBNull.Value;

            var cmsStandardIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CMSStandardID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = cmsStandardId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!cmsStandardId.HasValue)
                cmsStandardIdParam.Value = System.DBNull.Value;

            var reminderEmailRequiredParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ReminderEmailRequired", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = reminderEmailRequired.GetValueOrDefault() };
            if (!reminderEmailRequired.HasValue)
                reminderEmailRequiredParam.Value = System.DBNull.Value;

            var taskResolutionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskResolution", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = taskResolution, Size = -1 };
            if (taskResolutionParam.Value == null)
                taskResolutionParam.Value = System.DBNull.Value;

            var completeDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompleteDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = completeDate, Size = 10 };
            if (completeDateParam.Value == null)
                completeDateParam.Value = System.DBNull.Value;

            var lstUsersParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@lstUsers", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lstUsers, Size = -1 };
            if (lstUsersParam.Value == null)
                lstUsersParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiUpdateUserTaskReturnModel>("EXEC @procResult = [dbo].[apiUpdateUserTask] @TaskID, @TaskName, @TaskTypeID, @SiteID, @ProgramID, @AssignedDate, @AssignedToUserID, @AssignedByUserID, @TaskDetails, @CCUserIDs, @DueDate, @TaskStatus, @UpdatedByUserID, @CreatedByUserID, @TracerCustomID, @TracerResponseID, @TracerQuestionID, @TracerQuestionAnswerID, @EPTextID, @CMSStandardID, @ReminderEmailRequired, @TaskResolution, @CompleteDate, @lstUsers", taskIdParam, taskNameParam, taskTypeIdParam, siteIdParam, programIdParam, assignedDateParam, assignedToUserIdParam, assignedByUserIdParam, taskDetailsParam, ccUserIDsParam, dueDateParam, taskStatusParam, updatedByUserIdParam, createdByUserIdParam, tracerCustomIdParam, tracerResponseIdParam, tracerQuestionIdParam, tracerQuestionAnswerIdParam, epTextIdParam, cmsStandardIdParam, reminderEmailRequiredParam, taskResolutionParam, completeDateParam, lstUsersParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiUpdateUserTaskReturnModel>> ApiUpdateUserTaskAsync(int? taskId, string taskName, int? taskTypeId, int? siteId, int? programId, string assignedDate, int? assignedToUserId, int? assignedByUserId, string taskDetails, string ccUserIDs, string dueDate, int? taskStatus, int? updatedByUserId, int? createdByUserId, int? tracerCustomId, int? tracerResponseId, int? tracerQuestionId, int? tracerQuestionAnswerId, int? epTextId, int? cmsStandardId, bool? reminderEmailRequired, string taskResolution, string completeDate, string lstUsers)
        {
            var taskIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = taskId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskId.HasValue)
                taskIdParam.Value = System.DBNull.Value;

            var taskNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = taskName, Size = 150 };
            if (taskNameParam.Value == null)
                taskNameParam.Value = System.DBNull.Value;

            var taskTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = taskTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskTypeId.HasValue)
                taskTypeIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var assignedDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AssignedDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = assignedDate, Size = 10 };
            if (assignedDateParam.Value == null)
                assignedDateParam.Value = System.DBNull.Value;

            var assignedToUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AssignedToUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = assignedToUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!assignedToUserId.HasValue)
                assignedToUserIdParam.Value = System.DBNull.Value;

            var assignedByUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AssignedByUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = assignedByUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!assignedByUserId.HasValue)
                assignedByUserIdParam.Value = System.DBNull.Value;

            var taskDetailsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskDetails", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = taskDetails, Size = -1 };
            if (taskDetailsParam.Value == null)
                taskDetailsParam.Value = System.DBNull.Value;

            var ccUserIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CCUserIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = ccUserIDs, Size = -1 };
            if (ccUserIDsParam.Value == null)
                ccUserIDsParam.Value = System.DBNull.Value;

            var dueDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DueDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = dueDate, Size = 10 };
            if (dueDateParam.Value == null)
                dueDateParam.Value = System.DBNull.Value;

            var taskStatusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskStatus", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = taskStatus.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskStatus.HasValue)
                taskStatusParam.Value = System.DBNull.Value;

            var updatedByUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdatedByUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = updatedByUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!updatedByUserId.HasValue)
                updatedByUserIdParam.Value = System.DBNull.Value;

            var createdByUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatedByUserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = createdByUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!createdByUserId.HasValue)
                createdByUserIdParam.Value = System.DBNull.Value;

            var tracerCustomIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerCustomID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerCustomId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerCustomId.HasValue)
                tracerCustomIdParam.Value = System.DBNull.Value;

            var tracerResponseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerResponseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerResponseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerResponseId.HasValue)
                tracerResponseIdParam.Value = System.DBNull.Value;

            var tracerQuestionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionId.HasValue)
                tracerQuestionIdParam.Value = System.DBNull.Value;

            var tracerQuestionAnswerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TracerQuestionAnswerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tracerQuestionAnswerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tracerQuestionAnswerId.HasValue)
                tracerQuestionAnswerIdParam.Value = System.DBNull.Value;

            var epTextIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EPTextID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = epTextId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!epTextId.HasValue)
                epTextIdParam.Value = System.DBNull.Value;

            var cmsStandardIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CMSStandardID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = cmsStandardId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!cmsStandardId.HasValue)
                cmsStandardIdParam.Value = System.DBNull.Value;

            var reminderEmailRequiredParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ReminderEmailRequired", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = reminderEmailRequired.GetValueOrDefault() };
            if (!reminderEmailRequired.HasValue)
                reminderEmailRequiredParam.Value = System.DBNull.Value;

            var taskResolutionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaskResolution", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = taskResolution, Size = -1 };
            if (taskResolutionParam.Value == null)
                taskResolutionParam.Value = System.DBNull.Value;

            var completeDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompleteDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = completeDate, Size = 10 };
            if (completeDateParam.Value == null)
                completeDateParam.Value = System.DBNull.Value;

            var lstUsersParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@lstUsers", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lstUsers, Size = -1 };
            if (lstUsersParam.Value == null)
                lstUsersParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiUpdateUserTaskReturnModel>("EXEC [dbo].[apiUpdateUserTask] @TaskID, @TaskName, @TaskTypeID, @SiteID, @ProgramID, @AssignedDate, @AssignedToUserID, @AssignedByUserID, @TaskDetails, @CCUserIDs, @DueDate, @TaskStatus, @UpdatedByUserID, @CreatedByUserID, @TracerCustomID, @TracerResponseID, @TracerQuestionID, @TracerQuestionAnswerID, @EPTextID, @CMSStandardID, @ReminderEmailRequired, @TaskResolution, @CompleteDate, @lstUsers", taskIdParam, taskNameParam, taskTypeIdParam, siteIdParam, programIdParam, assignedDateParam, assignedToUserIdParam, assignedByUserIdParam, taskDetailsParam, ccUserIDsParam, dueDateParam, taskStatusParam, updatedByUserIdParam, createdByUserIdParam, tracerCustomIdParam, tracerResponseIdParam, tracerQuestionIdParam, tracerQuestionAnswerIdParam, epTextIdParam, cmsStandardIdParam, reminderEmailRequiredParam, taskResolutionParam, completeDateParam, lstUsersParam).ToListAsync();

            return procResultData;
        }

    }
}
// </auto-generated>
