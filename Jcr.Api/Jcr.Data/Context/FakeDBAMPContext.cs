// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Jcr.Data
{
    using Jcr.Data;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class FakeDBAMPContext : IDBAMPContext
    {
        public System.Data.Entity.DbSet<ActionType> ActionTypes { get; set; }
        public System.Data.Entity.DbSet<Site> Sites { get; set; }
        public System.Data.Entity.DbSet<Token> Tokens { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<UserSecurityAttribute> UserSecurityAttributes { get; set; }
        public System.Data.Entity.DbSet<UserSiteMap> UserSiteMaps { get; set; }

        public FakeDBAMPContext()
        {
            ActionTypes = new FakeDbSet<ActionType>("ActionTypeId");
            Sites = new FakeDbSet<Site>("SiteId");
            Tokens = new FakeDbSet<Token>("TokenId");
            Users = new FakeDbSet<User>("UserId");
            UserSecurityAttributes = new FakeDbSet<UserSecurityAttribute>("UserId", "AttributeTypeId");
            UserSiteMaps = new FakeDbSet<UserSiteMap>("UserId", "SiteId");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public int ApiAddAppEventLogDetail(int? programId, int? siteId, int? actionTaken, int? userId, int? eProductId)
        {

            return 0;
        }

        public ApiAddUserSecurityAttributeReturnModel ApiAddUserSecurityAttribute(int? userId, int? attributeTypeId, string attributeValue, System.DateTime? attributeActivationDate, System.DateTime? attributeExpirationDate)
        {
            int procResult;
            return ApiAddUserSecurityAttribute(userId, attributeTypeId, attributeValue, attributeActivationDate, attributeExpirationDate, out procResult);
        }

        public ApiAddUserSecurityAttributeReturnModel ApiAddUserSecurityAttribute(int? userId, int? attributeTypeId, string attributeValue, System.DateTime? attributeActivationDate, System.DateTime? attributeExpirationDate, out int procResult)
        {

            procResult = 0;
            return new ApiAddUserSecurityAttributeReturnModel();
        }

        public System.Threading.Tasks.Task<ApiAddUserSecurityAttributeReturnModel> ApiAddUserSecurityAttributeAsync(int? userId, int? attributeTypeId, string attributeValue, System.DateTime? attributeActivationDate, System.DateTime? attributeExpirationDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiAddUserSecurityAttribute(userId, attributeTypeId, attributeValue, attributeActivationDate, attributeExpirationDate, out procResult));
        }

        public System.Collections.Generic.List<ApiCheckUserLoginFirstAfterProductReleaseReturnModel> ApiCheckUserLoginFirstAfterProductRelease(int? eProductId, int? userId, System.DateTime? releaseDate)
        {
            int procResult;
            return ApiCheckUserLoginFirstAfterProductRelease(eProductId, userId, releaseDate, out procResult);
        }

        public System.Collections.Generic.List<ApiCheckUserLoginFirstAfterProductReleaseReturnModel> ApiCheckUserLoginFirstAfterProductRelease(int? eProductId, int? userId, System.DateTime? releaseDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiCheckUserLoginFirstAfterProductReleaseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiCheckUserLoginFirstAfterProductReleaseReturnModel>> ApiCheckUserLoginFirstAfterProductReleaseAsync(int? eProductId, int? userId, System.DateTime? releaseDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiCheckUserLoginFirstAfterProductRelease(eProductId, userId, releaseDate, out procResult));
        }

        public ApiCodeSelectByIdReturnModel ApiCodeSelectById(int? codeCategoryId, int? parentId)
        {
            int procResult;
            return ApiCodeSelectById(codeCategoryId, parentId, out procResult);
        }

        public ApiCodeSelectByIdReturnModel ApiCodeSelectById(int? codeCategoryId, int? parentId, out int procResult)
        {

            procResult = 0;
            return new ApiCodeSelectByIdReturnModel();
        }

        public System.Threading.Tasks.Task<ApiCodeSelectByIdReturnModel> ApiCodeSelectByIdAsync(int? codeCategoryId, int? parentId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiCodeSelectById(codeCategoryId, parentId, out procResult));
        }

        public ApiConfigurationSelectReturnModel ApiConfigurationSelect(int? configurationId)
        {
            int procResult;
            return ApiConfigurationSelect(configurationId, out procResult);
        }

        public ApiConfigurationSelectReturnModel ApiConfigurationSelect(int? configurationId, out int procResult)
        {

            procResult = 0;
            return new ApiConfigurationSelectReturnModel();
        }

        public System.Threading.Tasks.Task<ApiConfigurationSelectReturnModel> ApiConfigurationSelectAsync(int? configurationId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiConfigurationSelect(configurationId, out procResult));
        }

        public ApiCreateTracersGuestUserReturnModel ApiCreateTracersGuestUser(string userLogonId, string firstName, string lastName, int? siteId, int? roleId)
        {
            int procResult;
            return ApiCreateTracersGuestUser(userLogonId, firstName, lastName, siteId, roleId, out procResult);
        }

        public ApiCreateTracersGuestUserReturnModel ApiCreateTracersGuestUser(string userLogonId, string firstName, string lastName, int? siteId, int? roleId, out int procResult)
        {

            procResult = 0;
            return new ApiCreateTracersGuestUserReturnModel();
        }

        public System.Threading.Tasks.Task<ApiCreateTracersGuestUserReturnModel> ApiCreateTracersGuestUserAsync(string userLogonId, string firstName, string lastName, int? siteId, int? roleId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiCreateTracersGuestUser(userLogonId, firstName, lastName, siteId, roleId, out procResult));
        }

        public int ApiExceptionLogInsert(string exceptionText, string pageName, string methodName, int? userId, int? siteId, string transSql, string httpReferrer, out int? exceptionLogId)
        {
            exceptionLogId = default(int);

            return 0;
        }

        public System.Collections.Generic.List<ApiGetAllUserSitesReturnModel> ApiGetAllUserSites(int? userId)
        {
            int procResult;
            return ApiGetAllUserSites(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetAllUserSitesReturnModel> ApiGetAllUserSites(int? userId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiGetAllUserSitesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetAllUserSitesReturnModel>> ApiGetAllUserSitesAsync(int? userId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiGetAllUserSites(userId, out procResult));
        }

        public System.Collections.Generic.List<ApiGetEmailListBySiteListReturnModel> ApiGetEmailListBySiteList(string search, string siteList)
        {
            int procResult;
            return ApiGetEmailListBySiteList(search, siteList, out procResult);
        }

        public System.Collections.Generic.List<ApiGetEmailListBySiteListReturnModel> ApiGetEmailListBySiteList(string search, string siteList, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiGetEmailListBySiteListReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetEmailListBySiteListReturnModel>> ApiGetEmailListBySiteListAsync(string search, string siteList)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiGetEmailListBySiteList(search, siteList, out procResult));
        }

        public System.Collections.Generic.List<ApiGetEulaStatusReturnModel> ApiGetEulaStatus(int? userId)
        {
            int procResult;
            return ApiGetEulaStatus(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetEulaStatusReturnModel> ApiGetEulaStatus(int? userId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiGetEulaStatusReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetEulaStatusReturnModel>> ApiGetEulaStatusAsync(int? userId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiGetEulaStatus(userId, out procResult));
        }

        public ApiGetSiteFullNameReturnModel ApiGetSiteFullName(int? siteId)
        {
            int procResult;
            return ApiGetSiteFullName(siteId, out procResult);
        }

        public ApiGetSiteFullNameReturnModel ApiGetSiteFullName(int? siteId, out int procResult)
        {

            procResult = 0;
            return new ApiGetSiteFullNameReturnModel();
        }

        public System.Threading.Tasks.Task<ApiGetSiteFullNameReturnModel> ApiGetSiteFullNameAsync(int? siteId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiGetSiteFullName(siteId, out procResult));
        }

        public System.Collections.Generic.List<ApiGetTokenbyUserIdReturnModel> ApiGetTokenbyUserId(int? userId)
        {
            int procResult;
            return ApiGetTokenbyUserId(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTokenbyUserIdReturnModel> ApiGetTokenbyUserId(int? userId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiGetTokenbyUserIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTokenbyUserIdReturnModel>> ApiGetTokenbyUserIdAsync(int? userId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiGetTokenbyUserId(userId, out procResult));
        }

        public ApiGetUserByUserLogonIdReturnModel ApiGetUserByUserLogonId(string userLogonId)
        {
            int procResult;
            return ApiGetUserByUserLogonId(userLogonId, out procResult);
        }

        public ApiGetUserByUserLogonIdReturnModel ApiGetUserByUserLogonId(string userLogonId, out int procResult)
        {

            procResult = 0;
            return new ApiGetUserByUserLogonIdReturnModel();
        }

        public System.Threading.Tasks.Task<ApiGetUserByUserLogonIdReturnModel> ApiGetUserByUserLogonIdAsync(string userLogonId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiGetUserByUserLogonId(userLogonId, out procResult));
        }

        public System.Collections.Generic.List<ApiGetUserDefaultSiteIdReturnModel> ApiGetUserDefaultSiteId(int? userId)
        {
            int procResult;
            return ApiGetUserDefaultSiteId(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetUserDefaultSiteIdReturnModel> ApiGetUserDefaultSiteId(int? userId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiGetUserDefaultSiteIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetUserDefaultSiteIdReturnModel>> ApiGetUserDefaultSiteIdAsync(int? userId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiGetUserDefaultSiteId(userId, out procResult));
        }

        public System.Collections.Generic.List<ApiGetUserPasswordReturnModel> ApiGetUserPassword(int? userId)
        {
            int procResult;
            return ApiGetUserPassword(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetUserPasswordReturnModel> ApiGetUserPassword(int? userId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiGetUserPasswordReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetUserPasswordReturnModel>> ApiGetUserPasswordAsync(int? userId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiGetUserPassword(userId, out procResult));
        }

        public System.Collections.Generic.List<ApiGetUserSecurityQuestionsReturnModel> ApiGetUserSecurityQuestions(int? userId, int? codeCategoryId, int? questionTyeId1, int? questionTyeId2)
        {
            int procResult;
            return ApiGetUserSecurityQuestions(userId, codeCategoryId, questionTyeId1, questionTyeId2, out procResult);
        }

        public System.Collections.Generic.List<ApiGetUserSecurityQuestionsReturnModel> ApiGetUserSecurityQuestions(int? userId, int? codeCategoryId, int? questionTyeId1, int? questionTyeId2, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiGetUserSecurityQuestionsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetUserSecurityQuestionsReturnModel>> ApiGetUserSecurityQuestionsAsync(int? userId, int? codeCategoryId, int? questionTyeId1, int? questionTyeId2)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiGetUserSecurityQuestions(userId, codeCategoryId, questionTyeId1, questionTyeId2, out procResult));
        }

        public int ApiInsertCustomerSupport(int? userId, int? siteId, int? hcoid, System.DateTime? requestTime, string requestSubject, string requestBody, int? eProductId, int? programId)
        {

            return 0;
        }

        public ApiIsFeatureEnabledReturnModel ApiIsFeatureEnabled(int? siteId, int? featureId)
        {
            int procResult;
            return ApiIsFeatureEnabled(siteId, featureId, out procResult);
        }

        public ApiIsFeatureEnabledReturnModel ApiIsFeatureEnabled(int? siteId, int? featureId, out int procResult)
        {

            procResult = 0;
            return new ApiIsFeatureEnabledReturnModel();
        }

        public System.Threading.Tasks.Task<ApiIsFeatureEnabledReturnModel> ApiIsFeatureEnabledAsync(int? siteId, int? featureId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiIsFeatureEnabled(siteId, featureId, out procResult));
        }

        public int ApiLogTracerActionSummaryByMonth(int? programId, int? siteId, int? actionTaken, int? userId)
        {

            return 0;
        }

        public ApiSelectSecurityQuestionsByIdReturnModel ApiSelectSecurityQuestionsById(int? id)
        {
            int procResult;
            return ApiSelectSecurityQuestionsById(id, out procResult);
        }

        public ApiSelectSecurityQuestionsByIdReturnModel ApiSelectSecurityQuestionsById(int? id, out int procResult)
        {

            procResult = 0;
            return new ApiSelectSecurityQuestionsByIdReturnModel();
        }

        public System.Threading.Tasks.Task<ApiSelectSecurityQuestionsByIdReturnModel> ApiSelectSecurityQuestionsByIdAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiSelectSecurityQuestionsById(id, out procResult));
        }

        public System.Collections.Generic.List<ApiSelectTracerProgramsBySiteUserReturnModel> ApiSelectTracerProgramsBySiteUser(int? siteId, int? userId, int? cycleId)
        {
            int procResult;
            return ApiSelectTracerProgramsBySiteUser(siteId, userId, cycleId, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectTracerProgramsBySiteUserReturnModel> ApiSelectTracerProgramsBySiteUser(int? siteId, int? userId, int? cycleId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiSelectTracerProgramsBySiteUserReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectTracerProgramsBySiteUserReturnModel>> ApiSelectTracerProgramsBySiteUserAsync(int? siteId, int? userId, int? cycleId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiSelectTracerProgramsBySiteUser(siteId, userId, cycleId, out procResult));
        }

        public System.Collections.Generic.List<ApiSelectTracerSitesByUserReturnModel> ApiSelectTracerSitesByUser(int? userId, int? siteId, bool? filteredsites, bool? isGuestUser)
        {
            int procResult;
            return ApiSelectTracerSitesByUser(userId, siteId, filteredsites, isGuestUser, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectTracerSitesByUserReturnModel> ApiSelectTracerSitesByUser(int? userId, int? siteId, bool? filteredsites, bool? isGuestUser, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiSelectTracerSitesByUserReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectTracerSitesByUserReturnModel>> ApiSelectTracerSitesByUserAsync(int? userId, int? siteId, bool? filteredsites, bool? isGuestUser)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiSelectTracerSitesByUser(userId, siteId, filteredsites, isGuestUser, out procResult));
        }

        public System.Collections.Generic.List<ApiSelectUserIdByUserLogonIdReturnModel> ApiSelectUserIdByUserLogonId(string userLogonId)
        {
            int procResult;
            return ApiSelectUserIdByUserLogonId(userLogonId, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectUserIdByUserLogonIdReturnModel> ApiSelectUserIdByUserLogonId(string userLogonId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiSelectUserIdByUserLogonIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectUserIdByUserLogonIdReturnModel>> ApiSelectUserIdByUserLogonIdAsync(string userLogonId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiSelectUserIdByUserLogonId(userLogonId, out procResult));
        }

        public System.Collections.Generic.List<ApiSiteSelectByUserIdReturnModel> ApiSiteSelectByUserId(int? userId)
        {
            int procResult;
            return ApiSiteSelectByUserId(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiSiteSelectByUserIdReturnModel> ApiSiteSelectByUserId(int? userId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiSiteSelectByUserIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSiteSelectByUserIdReturnModel>> ApiSiteSelectByUserIdAsync(int? userId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiSiteSelectByUserId(userId, out procResult));
        }

        public int ApiTempPasswordActivate(int? userId)
        {

            return 0;
        }

        public int ApiTempPasswordInactivate(int? userId)
        {

            return 0;
        }

        public System.Collections.Generic.List<ApiTempPasswordValidationReturnModel> ApiTempPasswordValidation(int? userId, string tempPassword)
        {
            int procResult;
            return ApiTempPasswordValidation(userId, tempPassword, out procResult);
        }

        public System.Collections.Generic.List<ApiTempPasswordValidationReturnModel> ApiTempPasswordValidation(int? userId, string tempPassword, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiTempPasswordValidationReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiTempPasswordValidationReturnModel>> ApiTempPasswordValidationAsync(int? userId, string tempPassword)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiTempPasswordValidation(userId, tempPassword, out procResult));
        }

        public int ApiTokenDelete(int? userId, string authToken)
        {

            return 0;
        }

        public int ApiTokenInsert(int? userId, string authToken, System.DateTime? issuedOn, System.DateTime? expiresOn)
        {

            return 0;
        }

        public int ApiTokenUpdate(int? userId, string authToken, System.DateTime? expiresOn)
        {

            return 0;
        }

        public System.Collections.Generic.List<ApiTracerValidateUserWithNoPasswordReturnModel> ApiTracerValidateUserWithNoPassword(string userLogonId)
        {
            int procResult;
            return ApiTracerValidateUserWithNoPassword(userLogonId, out procResult);
        }

        public System.Collections.Generic.List<ApiTracerValidateUserWithNoPasswordReturnModel> ApiTracerValidateUserWithNoPassword(string userLogonId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiTracerValidateUserWithNoPasswordReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiTracerValidateUserWithNoPasswordReturnModel>> ApiTracerValidateUserWithNoPasswordAsync(string userLogonId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiTracerValidateUserWithNoPassword(userLogonId, out procResult));
        }

        public int ApiUserSecurityAttributeUpdate(int? userId, int? attributeTypeId, string attributeValue, System.DateTime? attributeActivationDate, System.DateTime? attributeExpirationDate)
        {

            return 0;
        }

        public int ApiUserSecurityAttributeUpdateByParent(int? userId, int? attributeTypeId, string attributeValue, System.DateTime? attributeActivationDate, System.DateTime? attributeExpirationDate, int? codeCategoryId, int? parentCodeId)
        {

            return 0;
        }

        public System.Collections.Generic.List<ApiValidateInactiveEMailIdsReturnModel> ApiValidateInactiveEMailIds(string lstUserEmailIDs)
        {
            int procResult;
            return ApiValidateInactiveEMailIds(lstUserEmailIDs, out procResult);
        }

        public System.Collections.Generic.List<ApiValidateInactiveEMailIdsReturnModel> ApiValidateInactiveEMailIds(string lstUserEmailIDs, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiValidateInactiveEMailIdsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiValidateInactiveEMailIdsReturnModel>> ApiValidateInactiveEMailIdsAsync(string lstUserEmailIDs)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiValidateInactiveEMailIds(lstUserEmailIDs, out procResult));
        }

        public ApiValidateSecurityQuestionAnswerReturnModel ApiValidateSecurityQuestionAnswer(int? userId, int? questionId, string answer)
        {
            int procResult;
            return ApiValidateSecurityQuestionAnswer(userId, questionId, answer, out procResult);
        }

        public ApiValidateSecurityQuestionAnswerReturnModel ApiValidateSecurityQuestionAnswer(int? userId, int? questionId, string answer, out int procResult)
        {

            procResult = 0;
            return new ApiValidateSecurityQuestionAnswerReturnModel();
        }

        public System.Threading.Tasks.Task<ApiValidateSecurityQuestionAnswerReturnModel> ApiValidateSecurityQuestionAnswerAsync(int? userId, int? questionId, string answer)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiValidateSecurityQuestionAnswer(userId, questionId, answer, out procResult));
        }

        public System.Collections.Generic.List<ApiValidateUserReturnModel> ApiValidateUser(string userLogin, string userPass, int? subscriptionTypeId)
        {
            int procResult;
            return ApiValidateUser(userLogin, userPass, subscriptionTypeId, out procResult);
        }

        public System.Collections.Generic.List<ApiValidateUserReturnModel> ApiValidateUser(string userLogin, string userPass, int? subscriptionTypeId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ApiValidateUserReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ApiValidateUserReturnModel>> ApiValidateUserAsync(string userLogin, string userPass, int? subscriptionTypeId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiValidateUser(userLogin, userPass, subscriptionTypeId, out procResult));
        }

        public ApiVerifyUserByUserLogonIdReturnModel ApiVerifyUserByUserLogonId(string userLogonId, int? siteId)
        {
            int procResult;
            return ApiVerifyUserByUserLogonId(userLogonId, siteId, out procResult);
        }

        public ApiVerifyUserByUserLogonIdReturnModel ApiVerifyUserByUserLogonId(string userLogonId, int? siteId, out int procResult)
        {

            procResult = 0;
            return new ApiVerifyUserByUserLogonIdReturnModel();
        }

        public System.Threading.Tasks.Task<ApiVerifyUserByUserLogonIdReturnModel> ApiVerifyUserByUserLogonIdAsync(string userLogonId, int? siteId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ApiVerifyUserByUserLogonId(userLogonId, siteId, out procResult));
        }

        public UspSiteSelectReturnModel UspSiteSelect(int? siteId)
        {
            int procResult;
            return UspSiteSelect(siteId, out procResult);
        }

        public UspSiteSelectReturnModel UspSiteSelect(int? siteId, out int procResult)
        {

            procResult = 0;
            return new UspSiteSelectReturnModel();
        }

        public System.Threading.Tasks.Task<UspSiteSelectReturnModel> UspSiteSelectAsync(int? siteId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspSiteSelect(siteId, out procResult));
        }

    }
}
// </auto-generated>
