// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Jcr.Data
{
    using Jcr.Data;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class DBAMPContext : CustomDbContext, IDBAMPContext
    {
        public System.Data.Entity.DbSet<ActionType> ActionTypes { get; set; } // ActionType
        public System.Data.Entity.DbSet<Site> Sites { get; set; } // Site
        public System.Data.Entity.DbSet<Token> Tokens { get; set; } // Token
        public System.Data.Entity.DbSet<User> Users { get; set; } // User
        public System.Data.Entity.DbSet<UserSecurityAttribute> UserSecurityAttributes { get; set; } // UserSecurityAttribute
        public System.Data.Entity.DbSet<UserSiteMap> UserSiteMaps { get; set; } // UserSiteMap

        static DBAMPContext()
        {
            System.Data.Entity.Database.SetInitializer<DBAMPContext>(null);
            DBAMPContextStaticPartial(); // Create the following method in your partial class: private static void DBAMPContextStaticPartial() { }
        }

        public DBAMPContext()
            : base("Name=DBAMP")
        {
            InitializePartial();
        }

        public DBAMPContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public DBAMPContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public DBAMPContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public DBAMPContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ActionTypeConfiguration());
            modelBuilder.Configurations.Add(new SiteConfiguration());
            modelBuilder.Configurations.Add(new TokenConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new UserSecurityAttributeConfiguration());
            modelBuilder.Configurations.Add(new UserSiteMapConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ActionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SiteConfiguration(schema));
            modelBuilder.Configurations.Add(new TokenConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new UserSecurityAttributeConfiguration(schema));
            modelBuilder.Configurations.Add(new UserSiteMapConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);

        // Stored Procedures
        public int ApiAddAppEventLogDetail(int? programId, int? siteId, int? actionTaken, int? userId, int? eProductId)
        {
            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var actionTakenParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ActionTaken", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = actionTaken.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!actionTaken.HasValue)
                actionTakenParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var eProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = eProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eProductId.HasValue)
                eProductIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiAddAppEventLogDetail] @ProgramID, @SiteID, @ActionTaken, @UserID, @EProductID", programIdParam, siteIdParam, actionTakenParam, userIdParam, eProductIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public ApiAddUserSecurityAttributeReturnModel ApiAddUserSecurityAttribute(int? userId, int? attributeTypeId, string attributeValue, System.DateTime? attributeActivationDate, System.DateTime? attributeExpirationDate)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var attributeTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = attributeTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!attributeTypeId.HasValue)
                attributeTypeIdParam.Value = System.DBNull.Value;

            var attributeValueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeValue", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = attributeValue, Size = 250 };
            if (attributeValueParam.Value == null)
                attributeValueParam.Value = System.DBNull.Value;

            var attributeActivationDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeActivationDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = attributeActivationDate.GetValueOrDefault() };
            if (!attributeActivationDate.HasValue)
                attributeActivationDateParam.Value = System.DBNull.Value;

            var attributeExpirationDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeExpirationDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = attributeExpirationDate.GetValueOrDefault() };
            if (!attributeExpirationDate.HasValue)
                attributeExpirationDateParam.Value = System.DBNull.Value;


            var procResultData = new ApiAddUserSecurityAttributeReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiAddUserSecurityAttribute]";
            cmd.Parameters.Add(userIdParam);
            cmd.Parameters.Add(attributeTypeIdParam);
            cmd.Parameters.Add(attributeValueParam);
            cmd.Parameters.Add(attributeActivationDateParam);
            cmd.Parameters.Add(attributeExpirationDateParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiAddUserSecurityAttributeReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ApiAddUserSecurityAttributeReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<ApiAddUserSecurityAttributeReturnModel> ApiAddUserSecurityAttributeAsync(int? userId, int? attributeTypeId, string attributeValue, System.DateTime? attributeActivationDate, System.DateTime? attributeExpirationDate)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var attributeTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = attributeTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!attributeTypeId.HasValue)
                attributeTypeIdParam.Value = System.DBNull.Value;

            var attributeValueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeValue", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = attributeValue, Size = 250 };
            if (attributeValueParam.Value == null)
                attributeValueParam.Value = System.DBNull.Value;

            var attributeActivationDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeActivationDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = attributeActivationDate.GetValueOrDefault() };
            if (!attributeActivationDate.HasValue)
                attributeActivationDateParam.Value = System.DBNull.Value;

            var attributeExpirationDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeExpirationDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = attributeExpirationDate.GetValueOrDefault() };
            if (!attributeExpirationDate.HasValue)
                attributeExpirationDateParam.Value = System.DBNull.Value;


            var procResultData = new ApiAddUserSecurityAttributeReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiAddUserSecurityAttribute]";
            cmd.Parameters.Add(userIdParam);
            cmd.Parameters.Add(attributeTypeIdParam);
            cmd.Parameters.Add(attributeValueParam);
            cmd.Parameters.Add(attributeActivationDateParam);
            cmd.Parameters.Add(attributeExpirationDateParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiAddUserSecurityAttributeReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<ApiAddUserSecurityAttributeReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<ApiCheckUserLoginFirstAfterProductReleaseReturnModel> ApiCheckUserLoginFirstAfterProductRelease(int? eProductId, int? userId, System.DateTime? releaseDate)
        {
            int procResult;
            return ApiCheckUserLoginFirstAfterProductRelease(eProductId, userId, releaseDate, out procResult);
        }

        public System.Collections.Generic.List<ApiCheckUserLoginFirstAfterProductReleaseReturnModel> ApiCheckUserLoginFirstAfterProductRelease(int? eProductId, int? userId, System.DateTime? releaseDate, out int procResult)
        {
            var eProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = eProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eProductId.HasValue)
                eProductIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var releaseDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ReleaseDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = releaseDate.GetValueOrDefault() };
            if (!releaseDate.HasValue)
                releaseDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiCheckUserLoginFirstAfterProductReleaseReturnModel>("EXEC @procResult = [dbo].[apiCheckUserLoginFirstAfterProductRelease] @EProductID, @UserID, @ReleaseDate", eProductIdParam, userIdParam, releaseDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiCheckUserLoginFirstAfterProductReleaseReturnModel>> ApiCheckUserLoginFirstAfterProductReleaseAsync(int? eProductId, int? userId, System.DateTime? releaseDate)
        {
            var eProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = eProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eProductId.HasValue)
                eProductIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var releaseDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ReleaseDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = releaseDate.GetValueOrDefault() };
            if (!releaseDate.HasValue)
                releaseDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiCheckUserLoginFirstAfterProductReleaseReturnModel>("EXEC [dbo].[apiCheckUserLoginFirstAfterProductRelease] @EProductID, @UserID, @ReleaseDate", eProductIdParam, userIdParam, releaseDateParam).ToListAsync();

            return procResultData;
        }

        public ApiCodeSelectByIdReturnModel ApiCodeSelectById(int? codeCategoryId, int? parentId)
        {
            var codeCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CodeCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = codeCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!codeCategoryId.HasValue)
                codeCategoryIdParam.Value = System.DBNull.Value;

            var parentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ParentID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = parentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!parentId.HasValue)
                parentIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiCodeSelectByIdReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiCodeSelectByID]";
            cmd.Parameters.Add(codeCategoryIdParam);
            cmd.Parameters.Add(parentIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiCodeSelectByIdReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ApiCodeSelectByIdReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<ApiCodeSelectByIdReturnModel.ResultSetModel3>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<ApiCodeSelectByIdReturnModel> ApiCodeSelectByIdAsync(int? codeCategoryId, int? parentId)
        {
            var codeCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CodeCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = codeCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!codeCategoryId.HasValue)
                codeCategoryIdParam.Value = System.DBNull.Value;

            var parentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ParentID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = parentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!parentId.HasValue)
                parentIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiCodeSelectByIdReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiCodeSelectByID]";
            cmd.Parameters.Add(codeCategoryIdParam);
            cmd.Parameters.Add(parentIdParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiCodeSelectByIdReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<ApiCodeSelectByIdReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<ApiCodeSelectByIdReturnModel.ResultSetModel3>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public ApiConfigurationSelectReturnModel ApiConfigurationSelect(int? configurationId)
        {
            var configurationIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ConfigurationID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = configurationId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!configurationId.HasValue)
                configurationIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiConfigurationSelectReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiConfigurationSelect]";
            cmd.Parameters.Add(configurationIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiConfigurationSelectReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ApiConfigurationSelectReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<ApiConfigurationSelectReturnModel> ApiConfigurationSelectAsync(int? configurationId)
        {
            var configurationIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ConfigurationID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = configurationId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!configurationId.HasValue)
                configurationIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiConfigurationSelectReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiConfigurationSelect]";
            cmd.Parameters.Add(configurationIdParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiConfigurationSelectReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<ApiConfigurationSelectReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public ApiCreateTracersGuestUserReturnModel ApiCreateTracersGuestUser(string userLogonId, string firstName, string lastName, int? siteId, int? roleId)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 100 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;

            var firstNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FirstName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstName, Size = 100 };
            if (firstNameParam.Value == null)
                firstNameParam.Value = System.DBNull.Value;

            var lastNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastName, Size = 100 };
            if (lastNameParam.Value == null)
                lastNameParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var roleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = roleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!roleId.HasValue)
                roleIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiCreateTracersGuestUserReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiCreateTracersGuestUser]";
            cmd.Parameters.Add(userLogonIdParam);
            cmd.Parameters.Add(firstNameParam);
            cmd.Parameters.Add(lastNameParam);
            cmd.Parameters.Add(siteIdParam);
            cmd.Parameters.Add(roleIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiCreateTracersGuestUserReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ApiCreateTracersGuestUserReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<ApiCreateTracersGuestUserReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<ApiCreateTracersGuestUserReturnModel.ResultSetModel4>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet5 = objectContext.Translate<ApiCreateTracersGuestUserReturnModel.ResultSetModel5>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<ApiCreateTracersGuestUserReturnModel> ApiCreateTracersGuestUserAsync(string userLogonId, string firstName, string lastName, int? siteId, int? roleId)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 100 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;

            var firstNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FirstName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstName, Size = 100 };
            if (firstNameParam.Value == null)
                firstNameParam.Value = System.DBNull.Value;

            var lastNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastName, Size = 100 };
            if (lastNameParam.Value == null)
                lastNameParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var roleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = roleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!roleId.HasValue)
                roleIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiCreateTracersGuestUserReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiCreateTracersGuestUser]";
            cmd.Parameters.Add(userLogonIdParam);
            cmd.Parameters.Add(firstNameParam);
            cmd.Parameters.Add(lastNameParam);
            cmd.Parameters.Add(siteIdParam);
            cmd.Parameters.Add(roleIdParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiCreateTracersGuestUserReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<ApiCreateTracersGuestUserReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<ApiCreateTracersGuestUserReturnModel.ResultSetModel3>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet4 = objectContext.Translate<ApiCreateTracersGuestUserReturnModel.ResultSetModel4>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet5 = objectContext.Translate<ApiCreateTracersGuestUserReturnModel.ResultSetModel5>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public int ApiExceptionLogInsert(string exceptionText, string pageName, string methodName, int? userId, int? siteId, string transSql, string httpReferrer, out int? exceptionLogId)
        {
            var exceptionTextParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ExceptionText", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = exceptionText, Size = -1 };
            if (exceptionTextParam.Value == null)
                exceptionTextParam.Value = System.DBNull.Value;

            var pageNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = pageName, Size = 255 };
            if (pageNameParam.Value == null)
                pageNameParam.Value = System.DBNull.Value;

            var methodNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MethodName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = methodName, Size = -1 };
            if (methodNameParam.Value == null)
                methodNameParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var transSqlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TransSQL", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = transSql, Size = 3000 };
            if (transSqlParam.Value == null)
                transSqlParam.Value = System.DBNull.Value;

            var httpReferrerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@HttpReferrer", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = httpReferrer, Size = 3000 };
            if (httpReferrerParam.Value == null)
                httpReferrerParam.Value = System.DBNull.Value;

            var exceptionLogIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ExceptionLogID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiExceptionLogInsert] @ExceptionText, @PageName, @MethodName, @UserID, @SiteId, @TransSQL, @HttpReferrer, @ExceptionLogID OUTPUT", exceptionTextParam, pageNameParam, methodNameParam, userIdParam, siteIdParam, transSqlParam, httpReferrerParam, exceptionLogIdParam, procResultParam);
            if (IsSqlParameterNull(exceptionLogIdParam))
                exceptionLogId = null;
            else
                exceptionLogId = (int) exceptionLogIdParam.Value;

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiGetAllUserSitesReturnModel> ApiGetAllUserSites(int? userId)
        {
            int procResult;
            return ApiGetAllUserSites(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetAllUserSitesReturnModel> ApiGetAllUserSites(int? userId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetAllUserSitesReturnModel>("EXEC @procResult = [dbo].[apiGetAllUserSites] @UserID", userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetAllUserSitesReturnModel>> ApiGetAllUserSitesAsync(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetAllUserSitesReturnModel>("EXEC [dbo].[apiGetAllUserSites] @UserID", userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetEmailListBySiteListReturnModel> ApiGetEmailListBySiteList(string search, string siteList)
        {
            int procResult;
            return ApiGetEmailListBySiteList(search, siteList, out procResult);
        }

        public System.Collections.Generic.List<ApiGetEmailListBySiteListReturnModel> ApiGetEmailListBySiteList(string search, string siteList, out int procResult)
        {
            var searchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Search", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = search, Size = -1 };
            if (searchParam.Value == null)
                searchParam.Value = System.DBNull.Value;

            var siteListParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteList", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = siteList, Size = -1 };
            if (siteListParam.Value == null)
                siteListParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetEmailListBySiteListReturnModel>("EXEC @procResult = [dbo].[apiGetEmailListBySiteList] @Search, @SiteList", searchParam, siteListParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetEmailListBySiteListReturnModel>> ApiGetEmailListBySiteListAsync(string search, string siteList)
        {
            var searchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Search", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = search, Size = -1 };
            if (searchParam.Value == null)
                searchParam.Value = System.DBNull.Value;

            var siteListParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteList", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = siteList, Size = -1 };
            if (siteListParam.Value == null)
                siteListParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetEmailListBySiteListReturnModel>("EXEC [dbo].[apiGetEmailListBySiteList] @Search, @SiteList", searchParam, siteListParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetEulaStatusReturnModel> ApiGetEulaStatus(int? userId)
        {
            int procResult;
            return ApiGetEulaStatus(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetEulaStatusReturnModel> ApiGetEulaStatus(int? userId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetEulaStatusReturnModel>("EXEC @procResult = [dbo].[apiGetEULAStatus] @UserID", userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetEulaStatusReturnModel>> ApiGetEulaStatusAsync(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetEulaStatusReturnModel>("EXEC [dbo].[apiGetEULAStatus] @UserID", userIdParam).ToListAsync();

            return procResultData;
        }

        public ApiGetSiteFullNameReturnModel ApiGetSiteFullName(int? siteId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiGetSiteFullNameReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiGetSiteFullName]";
            cmd.Parameters.Add(siteIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiGetSiteFullNameReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ApiGetSiteFullNameReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<ApiGetSiteFullNameReturnModel> ApiGetSiteFullNameAsync(int? siteId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiGetSiteFullNameReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiGetSiteFullName]";
            cmd.Parameters.Add(siteIdParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiGetSiteFullNameReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<ApiGetSiteFullNameReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetTokenbyUserIdReturnModel> ApiGetTokenbyUserId(int? userId)
        {
            int procResult;
            return ApiGetTokenbyUserId(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetTokenbyUserIdReturnModel> ApiGetTokenbyUserId(int? userId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetTokenbyUserIdReturnModel>("EXEC @procResult = [dbo].[apiGetTokenbyUserID] @UserID", userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetTokenbyUserIdReturnModel>> ApiGetTokenbyUserIdAsync(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetTokenbyUserIdReturnModel>("EXEC [dbo].[apiGetTokenbyUserID] @UserID", userIdParam).ToListAsync();

            return procResultData;
        }

        public ApiGetUserByUserLogonIdReturnModel ApiGetUserByUserLogonId(string userLogonId)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 100 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiGetUserByUserLogonIdReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiGetUserByUserLogonID]";
            cmd.Parameters.Add(userLogonIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiGetUserByUserLogonIdReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ApiGetUserByUserLogonIdReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<ApiGetUserByUserLogonIdReturnModel> ApiGetUserByUserLogonIdAsync(string userLogonId)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 100 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiGetUserByUserLogonIdReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiGetUserByUserLogonID]";
            cmd.Parameters.Add(userLogonIdParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiGetUserByUserLogonIdReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<ApiGetUserByUserLogonIdReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetUserDefaultSiteIdReturnModel> ApiGetUserDefaultSiteId(int? userId)
        {
            int procResult;
            return ApiGetUserDefaultSiteId(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetUserDefaultSiteIdReturnModel> ApiGetUserDefaultSiteId(int? userId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetUserDefaultSiteIdReturnModel>("EXEC @procResult = [dbo].[apiGetUserDefaultSiteId] @UserID", userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetUserDefaultSiteIdReturnModel>> ApiGetUserDefaultSiteIdAsync(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetUserDefaultSiteIdReturnModel>("EXEC [dbo].[apiGetUserDefaultSiteId] @UserID", userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetUserPasswordReturnModel> ApiGetUserPassword(int? userId)
        {
            int procResult;
            return ApiGetUserPassword(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiGetUserPasswordReturnModel> ApiGetUserPassword(int? userId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetUserPasswordReturnModel>("EXEC @procResult = [dbo].[apiGetUserPassword] @UserID", userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetUserPasswordReturnModel>> ApiGetUserPasswordAsync(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetUserPasswordReturnModel>("EXEC [dbo].[apiGetUserPassword] @UserID", userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiGetUserSecurityQuestionsReturnModel> ApiGetUserSecurityQuestions(int? userId, int? codeCategoryId, int? questionTyeId1, int? questionTyeId2)
        {
            int procResult;
            return ApiGetUserSecurityQuestions(userId, codeCategoryId, questionTyeId1, questionTyeId2, out procResult);
        }

        public System.Collections.Generic.List<ApiGetUserSecurityQuestionsReturnModel> ApiGetUserSecurityQuestions(int? userId, int? codeCategoryId, int? questionTyeId1, int? questionTyeId2, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var codeCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CodeCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = codeCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!codeCategoryId.HasValue)
                codeCategoryIdParam.Value = System.DBNull.Value;

            var questionTyeId1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionTyeID1", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionTyeId1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionTyeId1.HasValue)
                questionTyeId1Param.Value = System.DBNull.Value;

            var questionTyeId2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionTyeID2", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionTyeId2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionTyeId2.HasValue)
                questionTyeId2Param.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiGetUserSecurityQuestionsReturnModel>("EXEC @procResult = [dbo].[apiGetUserSecurityQuestions] @UserID, @CodeCategoryID, @QuestionTyeID1, @QuestionTyeID2", userIdParam, codeCategoryIdParam, questionTyeId1Param, questionTyeId2Param, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiGetUserSecurityQuestionsReturnModel>> ApiGetUserSecurityQuestionsAsync(int? userId, int? codeCategoryId, int? questionTyeId1, int? questionTyeId2)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var codeCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CodeCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = codeCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!codeCategoryId.HasValue)
                codeCategoryIdParam.Value = System.DBNull.Value;

            var questionTyeId1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionTyeID1", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionTyeId1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionTyeId1.HasValue)
                questionTyeId1Param.Value = System.DBNull.Value;

            var questionTyeId2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionTyeID2", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionTyeId2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionTyeId2.HasValue)
                questionTyeId2Param.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiGetUserSecurityQuestionsReturnModel>("EXEC [dbo].[apiGetUserSecurityQuestions] @UserID, @CodeCategoryID, @QuestionTyeID1, @QuestionTyeID2", userIdParam, codeCategoryIdParam, questionTyeId1Param, questionTyeId2Param).ToListAsync();

            return procResultData;
        }

        public int ApiInsertCustomerSupport(int? userId, int? siteId, int? hcoid, System.DateTime? requestTime, string requestSubject, string requestBody, int? eProductId, int? programId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var hcoidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@HCOID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = hcoid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hcoid.HasValue)
                hcoidParam.Value = System.DBNull.Value;

            var requestTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RequestTime", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = requestTime.GetValueOrDefault() };
            if (!requestTime.HasValue)
                requestTimeParam.Value = System.DBNull.Value;

            var requestSubjectParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RequestSubject", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = requestSubject, Size = 200 };
            if (requestSubjectParam.Value == null)
                requestSubjectParam.Value = System.DBNull.Value;

            var requestBodyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RequestBody", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = requestBody, Size = 500 };
            if (requestBodyParam.Value == null)
                requestBodyParam.Value = System.DBNull.Value;

            var eProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = eProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eProductId.HasValue)
                eProductIdParam.Value = System.DBNull.Value;

            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiInsertCustomerSupport] @UserID, @SiteID, @HCOID, @RequestTime, @RequestSubject, @RequestBody, @EProductID, @ProgramID", userIdParam, siteIdParam, hcoidParam, requestTimeParam, requestSubjectParam, requestBodyParam, eProductIdParam, programIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public ApiIsFeatureEnabledReturnModel ApiIsFeatureEnabled(int? siteId, int? featureId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var featureIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FeatureID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = featureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!featureId.HasValue)
                featureIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiIsFeatureEnabledReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiIsFeatureEnabled]";
            cmd.Parameters.Add(siteIdParam);
            cmd.Parameters.Add(featureIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiIsFeatureEnabledReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ApiIsFeatureEnabledReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<ApiIsFeatureEnabledReturnModel> ApiIsFeatureEnabledAsync(int? siteId, int? featureId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var featureIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FeatureID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = featureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!featureId.HasValue)
                featureIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiIsFeatureEnabledReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiIsFeatureEnabled]";
            cmd.Parameters.Add(siteIdParam);
            cmd.Parameters.Add(featureIdParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiIsFeatureEnabledReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<ApiIsFeatureEnabledReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public int ApiLogTracerActionSummaryByMonth(int? programId, int? siteId, int? actionTaken, int? userId)
        {
            var programIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProgramID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var actionTakenParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ActionTaken", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = actionTaken.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!actionTaken.HasValue)
                actionTakenParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiLogTracerActionSummaryByMonth] @ProgramID, @SiteID, @ActionTaken, @UserID", programIdParam, siteIdParam, actionTakenParam, userIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public ApiSelectSecurityQuestionsByIdReturnModel ApiSelectSecurityQuestionsById(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;


            var procResultData = new ApiSelectSecurityQuestionsByIdReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiSelectSecurityQuestionsByID]";
            cmd.Parameters.Add(idParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiSelectSecurityQuestionsByIdReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ApiSelectSecurityQuestionsByIdReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<ApiSelectSecurityQuestionsByIdReturnModel> ApiSelectSecurityQuestionsByIdAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;


            var procResultData = new ApiSelectSecurityQuestionsByIdReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiSelectSecurityQuestionsByID]";
            cmd.Parameters.Add(idParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiSelectSecurityQuestionsByIdReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<ApiSelectSecurityQuestionsByIdReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<ApiSelectTracerProgramsBySiteUserReturnModel> ApiSelectTracerProgramsBySiteUser(int? siteId, int? userId, int? cycleId)
        {
            int procResult;
            return ApiSelectTracerProgramsBySiteUser(siteId, userId, cycleId, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectTracerProgramsBySiteUserReturnModel> ApiSelectTracerProgramsBySiteUser(int? siteId, int? userId, int? cycleId, out int procResult)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var cycleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CycleID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = cycleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!cycleId.HasValue)
                cycleIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSelectTracerProgramsBySiteUserReturnModel>("EXEC @procResult = [dbo].[apiSelectTracerProgramsBySiteUser] @SiteID, @UserID, @CycleID", siteIdParam, userIdParam, cycleIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectTracerProgramsBySiteUserReturnModel>> ApiSelectTracerProgramsBySiteUserAsync(int? siteId, int? userId, int? cycleId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var cycleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CycleID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = cycleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!cycleId.HasValue)
                cycleIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSelectTracerProgramsBySiteUserReturnModel>("EXEC [dbo].[apiSelectTracerProgramsBySiteUser] @SiteID, @UserID, @CycleID", siteIdParam, userIdParam, cycleIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiSelectTracerSitesByUserReturnModel> ApiSelectTracerSitesByUser(int? userId, int? siteId, bool? filteredsites, bool? isGuestUser)
        {
            int procResult;
            return ApiSelectTracerSitesByUser(userId, siteId, filteredsites, isGuestUser, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectTracerSitesByUserReturnModel> ApiSelectTracerSitesByUser(int? userId, int? siteId, bool? filteredsites, bool? isGuestUser, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var filteredsitesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@filteredsites", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = filteredsites.GetValueOrDefault() };
            if (!filteredsites.HasValue)
                filteredsitesParam.Value = System.DBNull.Value;

            var isGuestUserParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsGuestUser", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isGuestUser.GetValueOrDefault() };
            if (!isGuestUser.HasValue)
                isGuestUserParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSelectTracerSitesByUserReturnModel>("EXEC @procResult = [dbo].[apiSelectTracerSitesByUser] @UserID, @SiteID, @filteredsites, @IsGuestUser", userIdParam, siteIdParam, filteredsitesParam, isGuestUserParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectTracerSitesByUserReturnModel>> ApiSelectTracerSitesByUserAsync(int? userId, int? siteId, bool? filteredsites, bool? isGuestUser)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;

            var filteredsitesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@filteredsites", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = filteredsites.GetValueOrDefault() };
            if (!filteredsites.HasValue)
                filteredsitesParam.Value = System.DBNull.Value;

            var isGuestUserParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsGuestUser", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isGuestUser.GetValueOrDefault() };
            if (!isGuestUser.HasValue)
                isGuestUserParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSelectTracerSitesByUserReturnModel>("EXEC [dbo].[apiSelectTracerSitesByUser] @UserID, @SiteID, @filteredsites, @IsGuestUser", userIdParam, siteIdParam, filteredsitesParam, isGuestUserParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiSelectUserIdByUserLogonIdReturnModel> ApiSelectUserIdByUserLogonId(string userLogonId)
        {
            int procResult;
            return ApiSelectUserIdByUserLogonId(userLogonId, out procResult);
        }

        public System.Collections.Generic.List<ApiSelectUserIdByUserLogonIdReturnModel> ApiSelectUserIdByUserLogonId(string userLogonId, out int procResult)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 50 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSelectUserIdByUserLogonIdReturnModel>("EXEC @procResult = [dbo].[apiSelectUserIDByUserLogonID] @UserLogonID", userLogonIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSelectUserIdByUserLogonIdReturnModel>> ApiSelectUserIdByUserLogonIdAsync(string userLogonId)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 50 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSelectUserIdByUserLogonIdReturnModel>("EXEC [dbo].[apiSelectUserIDByUserLogonID] @UserLogonID", userLogonIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ApiSiteSelectByUserIdReturnModel> ApiSiteSelectByUserId(int? userId)
        {
            int procResult;
            return ApiSiteSelectByUserId(userId, out procResult);
        }

        public System.Collections.Generic.List<ApiSiteSelectByUserIdReturnModel> ApiSiteSelectByUserId(int? userId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiSiteSelectByUserIdReturnModel>("EXEC @procResult = [dbo].[apiSiteSelectByUserID] @UserId", userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiSiteSelectByUserIdReturnModel>> ApiSiteSelectByUserIdAsync(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiSiteSelectByUserIdReturnModel>("EXEC [dbo].[apiSiteSelectByUserID] @UserId", userIdParam).ToListAsync();

            return procResultData;
        }

        public int ApiTempPasswordActivate(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiTempPasswordActivate] @UserID", userIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiTempPasswordInactivate(int? userId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiTempPasswordInactivate] @UserID", userIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiTempPasswordValidationReturnModel> ApiTempPasswordValidation(int? userId, string tempPassword)
        {
            int procResult;
            return ApiTempPasswordValidation(userId, tempPassword, out procResult);
        }

        public System.Collections.Generic.List<ApiTempPasswordValidationReturnModel> ApiTempPasswordValidation(int? userId, string tempPassword, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var tempPasswordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TempPassword", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = tempPassword, Size = 10 };
            if (tempPasswordParam.Value == null)
                tempPasswordParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiTempPasswordValidationReturnModel>("EXEC @procResult = [dbo].[apiTempPasswordValidation] @UserID, @TempPassword", userIdParam, tempPasswordParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiTempPasswordValidationReturnModel>> ApiTempPasswordValidationAsync(int? userId, string tempPassword)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var tempPasswordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TempPassword", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = tempPassword, Size = 10 };
            if (tempPasswordParam.Value == null)
                tempPasswordParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiTempPasswordValidationReturnModel>("EXEC [dbo].[apiTempPasswordValidation] @UserID, @TempPassword", userIdParam, tempPasswordParam).ToListAsync();

            return procResultData;
        }

        public int ApiTokenDelete(int? userId, string authToken)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var authTokenParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AuthToken", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = authToken, Size = -1 };
            if (authTokenParam.Value == null)
                authTokenParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiTokenDelete] @UserID, @AuthToken", userIdParam, authTokenParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiTokenInsert(int? userId, string authToken, System.DateTime? issuedOn, System.DateTime? expiresOn)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var authTokenParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AuthToken", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = authToken, Size = -1 };
            if (authTokenParam.Value == null)
                authTokenParam.Value = System.DBNull.Value;

            var issuedOnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IssuedOn", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = issuedOn.GetValueOrDefault() };
            if (!issuedOn.HasValue)
                issuedOnParam.Value = System.DBNull.Value;

            var expiresOnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ExpiresOn", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = expiresOn.GetValueOrDefault() };
            if (!expiresOn.HasValue)
                expiresOnParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiTokenInsert] @UserID, @AuthToken, @IssuedOn, @ExpiresOn", userIdParam, authTokenParam, issuedOnParam, expiresOnParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiTokenUpdate(int? userId, string authToken, System.DateTime? expiresOn)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var authTokenParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AuthToken", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = authToken, Size = -1 };
            if (authTokenParam.Value == null)
                authTokenParam.Value = System.DBNull.Value;

            var expiresOnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ExpiresOn", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = expiresOn.GetValueOrDefault() };
            if (!expiresOn.HasValue)
                expiresOnParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiTokenUpdate] @UserID, @AuthToken, @ExpiresOn", userIdParam, authTokenParam, expiresOnParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiTracerValidateUserWithNoPasswordReturnModel> ApiTracerValidateUserWithNoPassword(string userLogonId)
        {
            int procResult;
            return ApiTracerValidateUserWithNoPassword(userLogonId, out procResult);
        }

        public System.Collections.Generic.List<ApiTracerValidateUserWithNoPasswordReturnModel> ApiTracerValidateUserWithNoPassword(string userLogonId, out int procResult)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 100 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiTracerValidateUserWithNoPasswordReturnModel>("EXEC @procResult = [dbo].[apiTracerValidateUserWithNoPassword] @UserLogonID", userLogonIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiTracerValidateUserWithNoPasswordReturnModel>> ApiTracerValidateUserWithNoPasswordAsync(string userLogonId)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 100 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiTracerValidateUserWithNoPasswordReturnModel>("EXEC [dbo].[apiTracerValidateUserWithNoPassword] @UserLogonID", userLogonIdParam).ToListAsync();

            return procResultData;
        }

        public int ApiUserSecurityAttributeUpdate(int? userId, int? attributeTypeId, string attributeValue, System.DateTime? attributeActivationDate, System.DateTime? attributeExpirationDate)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var attributeTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = attributeTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!attributeTypeId.HasValue)
                attributeTypeIdParam.Value = System.DBNull.Value;

            var attributeValueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeValue", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = attributeValue, Size = 250 };
            if (attributeValueParam.Value == null)
                attributeValueParam.Value = System.DBNull.Value;

            var attributeActivationDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeActivationDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = attributeActivationDate.GetValueOrDefault() };
            if (!attributeActivationDate.HasValue)
                attributeActivationDateParam.Value = System.DBNull.Value;

            var attributeExpirationDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeExpirationDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = attributeExpirationDate.GetValueOrDefault() };
            if (!attributeExpirationDate.HasValue)
                attributeExpirationDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiUserSecurityAttributeUpdate] @UserID, @AttributeTypeID, @AttributeValue, @AttributeActivationDate, @AttributeExpirationDate", userIdParam, attributeTypeIdParam, attributeValueParam, attributeActivationDateParam, attributeExpirationDateParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ApiUserSecurityAttributeUpdateByParent(int? userId, int? attributeTypeId, string attributeValue, System.DateTime? attributeActivationDate, System.DateTime? attributeExpirationDate, int? codeCategoryId, int? parentCodeId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var attributeTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = attributeTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!attributeTypeId.HasValue)
                attributeTypeIdParam.Value = System.DBNull.Value;

            var attributeValueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeValue", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = attributeValue, Size = 250 };
            if (attributeValueParam.Value == null)
                attributeValueParam.Value = System.DBNull.Value;

            var attributeActivationDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeActivationDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = attributeActivationDate.GetValueOrDefault() };
            if (!attributeActivationDate.HasValue)
                attributeActivationDateParam.Value = System.DBNull.Value;

            var attributeExpirationDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttributeExpirationDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = attributeExpirationDate.GetValueOrDefault() };
            if (!attributeExpirationDate.HasValue)
                attributeExpirationDateParam.Value = System.DBNull.Value;

            var codeCategoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CodeCategoryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = codeCategoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!codeCategoryId.HasValue)
                codeCategoryIdParam.Value = System.DBNull.Value;

            var parentCodeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ParentCodeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = parentCodeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!parentCodeId.HasValue)
                parentCodeIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[apiUserSecurityAttributeUpdateByParent] @UserID, @AttributeTypeID, @AttributeValue, @AttributeActivationDate, @AttributeExpirationDate, @CodeCategoryID, @ParentCodeID", userIdParam, attributeTypeIdParam, attributeValueParam, attributeActivationDateParam, attributeExpirationDateParam, codeCategoryIdParam, parentCodeIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ApiValidateInactiveEMailIdsReturnModel> ApiValidateInactiveEMailIds(string lstUserEmailIDs)
        {
            int procResult;
            return ApiValidateInactiveEMailIds(lstUserEmailIDs, out procResult);
        }

        public System.Collections.Generic.List<ApiValidateInactiveEMailIdsReturnModel> ApiValidateInactiveEMailIds(string lstUserEmailIDs, out int procResult)
        {
            var lstUserEmailIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LstUserEmailIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lstUserEmailIDs, Size = -1 };
            if (lstUserEmailIDsParam.Value == null)
                lstUserEmailIDsParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiValidateInactiveEMailIdsReturnModel>("EXEC @procResult = [dbo].[apiValidateInactiveEMailIds] @LstUserEmailIDs", lstUserEmailIDsParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiValidateInactiveEMailIdsReturnModel>> ApiValidateInactiveEMailIdsAsync(string lstUserEmailIDs)
        {
            var lstUserEmailIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LstUserEmailIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lstUserEmailIDs, Size = -1 };
            if (lstUserEmailIDsParam.Value == null)
                lstUserEmailIDsParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiValidateInactiveEMailIdsReturnModel>("EXEC [dbo].[apiValidateInactiveEMailIds] @LstUserEmailIDs", lstUserEmailIDsParam).ToListAsync();

            return procResultData;
        }

        public ApiValidateSecurityQuestionAnswerReturnModel ApiValidateSecurityQuestionAnswer(int? userId, int? questionId, string answer)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var questionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionId.HasValue)
                questionIdParam.Value = System.DBNull.Value;

            var answerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Answer", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = answer, Size = 250 };
            if (answerParam.Value == null)
                answerParam.Value = System.DBNull.Value;


            var procResultData = new ApiValidateSecurityQuestionAnswerReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiValidateSecurityQuestionAnswer]";
            cmd.Parameters.Add(userIdParam);
            cmd.Parameters.Add(questionIdParam);
            cmd.Parameters.Add(answerParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiValidateSecurityQuestionAnswerReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ApiValidateSecurityQuestionAnswerReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<ApiValidateSecurityQuestionAnswerReturnModel> ApiValidateSecurityQuestionAnswerAsync(int? userId, int? questionId, string answer)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var questionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuestionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = questionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!questionId.HasValue)
                questionIdParam.Value = System.DBNull.Value;

            var answerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Answer", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = answer, Size = 250 };
            if (answerParam.Value == null)
                answerParam.Value = System.DBNull.Value;


            var procResultData = new ApiValidateSecurityQuestionAnswerReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiValidateSecurityQuestionAnswer]";
            cmd.Parameters.Add(userIdParam);
            cmd.Parameters.Add(questionIdParam);
            cmd.Parameters.Add(answerParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiValidateSecurityQuestionAnswerReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<ApiValidateSecurityQuestionAnswerReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<ApiValidateUserReturnModel> ApiValidateUser(string userLogin, string userPass, int? subscriptionTypeId)
        {
            int procResult;
            return ApiValidateUser(userLogin, userPass, subscriptionTypeId, out procResult);
        }

        public System.Collections.Generic.List<ApiValidateUserReturnModel> ApiValidateUser(string userLogin, string userPass, int? subscriptionTypeId, out int procResult)
        {
            var userLoginParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogin", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogin, Size = 50 };
            if (userLoginParam.Value == null)
                userLoginParam.Value = System.DBNull.Value;

            var userPassParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserPass", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userPass, Size = 250 };
            if (userPassParam.Value == null)
                userPassParam.Value = System.DBNull.Value;

            var subscriptionTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubscriptionTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = subscriptionTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subscriptionTypeId.HasValue)
                subscriptionTypeIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ApiValidateUserReturnModel>("EXEC @procResult = [dbo].[apiValidateUser] @UserLogin, @UserPass, @SubscriptionTypeID", userLoginParam, userPassParam, subscriptionTypeIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ApiValidateUserReturnModel>> ApiValidateUserAsync(string userLogin, string userPass, int? subscriptionTypeId)
        {
            var userLoginParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogin", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogin, Size = 50 };
            if (userLoginParam.Value == null)
                userLoginParam.Value = System.DBNull.Value;

            var userPassParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserPass", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userPass, Size = 250 };
            if (userPassParam.Value == null)
                userPassParam.Value = System.DBNull.Value;

            var subscriptionTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubscriptionTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = subscriptionTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subscriptionTypeId.HasValue)
                subscriptionTypeIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ApiValidateUserReturnModel>("EXEC [dbo].[apiValidateUser] @UserLogin, @UserPass, @SubscriptionTypeID", userLoginParam, userPassParam, subscriptionTypeIdParam).ToListAsync();

            return procResultData;
        }

        public ApiVerifyUserByUserLogonIdReturnModel ApiVerifyUserByUserLogonId(string userLogonId, int? siteId)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 100 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiVerifyUserByUserLogonIdReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiVerifyUserByUserLogonId]";
            cmd.Parameters.Add(userLogonIdParam);
            cmd.Parameters.Add(siteIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiVerifyUserByUserLogonIdReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ApiVerifyUserByUserLogonIdReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<ApiVerifyUserByUserLogonIdReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<ApiVerifyUserByUserLogonIdReturnModel.ResultSetModel4>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet5 = objectContext.Translate<ApiVerifyUserByUserLogonIdReturnModel.ResultSetModel5>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<ApiVerifyUserByUserLogonIdReturnModel> ApiVerifyUserByUserLogonIdAsync(string userLogonId, int? siteId)
        {
            var userLogonIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserLogonID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userLogonId, Size = 100 };
            if (userLogonIdParam.Value == null)
                userLogonIdParam.Value = System.DBNull.Value;

            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;


            var procResultData = new ApiVerifyUserByUserLogonIdReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[apiVerifyUserByUserLogonId]";
            cmd.Parameters.Add(userLogonIdParam);
            cmd.Parameters.Add(siteIdParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ApiVerifyUserByUserLogonIdReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<ApiVerifyUserByUserLogonIdReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<ApiVerifyUserByUserLogonIdReturnModel.ResultSetModel3>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet4 = objectContext.Translate<ApiVerifyUserByUserLogonIdReturnModel.ResultSetModel4>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet5 = objectContext.Translate<ApiVerifyUserByUserLogonIdReturnModel.ResultSetModel5>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public UspSiteSelectReturnModel UspSiteSelect(int? siteId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;


            var procResultData = new UspSiteSelectReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[uspSiteSelect]";
            cmd.Parameters.Add(siteIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<UspSiteSelectReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<UspSiteSelectReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<UspSiteSelectReturnModel> UspSiteSelectAsync(int? siteId)
        {
            var siteIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteId.HasValue)
                siteIdParam.Value = System.DBNull.Value;


            var procResultData = new UspSiteSelectReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[uspSiteSelect]";
            cmd.Parameters.Add(siteIdParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<UspSiteSelectReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<UspSiteSelectReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

    }
}
// </auto-generated>
