// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Jcr.Data
{
    using Jcr.Data;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class FakeDBFileTableContext : IDBFileTableContext
    {

        public FakeDBFileTableContext()
        {

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public System.Collections.Generic.List<UsmCcmInsertFileReturnModel> UsmCcmInsertFile(string fileName, byte[] fileData, string appCode)
        {
            int procResult;
            return UsmCcmInsertFile(fileName, fileData, appCode, out procResult);
        }

        public System.Collections.Generic.List<UsmCcmInsertFileReturnModel> UsmCcmInsertFile(string fileName, byte[] fileData, string appCode, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UsmCcmInsertFileReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UsmCcmInsertFileReturnModel>> UsmCcmInsertFileAsync(string fileName, byte[] fileData, string appCode)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UsmCcmInsertFile(fileName, fileData, appCode, out procResult));
        }

        public int UsmMsDeleteFile(System.Guid? fileStreamId)
        {

            return 0;
        }

        public System.Collections.Generic.List<UsmMsInsertFileReturnModel> UsmMsInsertFile(string filename, byte[] filedata)
        {
            int procResult;
            return UsmMsInsertFile(filename, filedata, out procResult);
        }

        public System.Collections.Generic.List<UsmMsInsertFileReturnModel> UsmMsInsertFile(string filename, byte[] filedata, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UsmMsInsertFileReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UsmMsInsertFileReturnModel>> UsmMsInsertFileAsync(string filename, byte[] filedata)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UsmMsInsertFile(filename, filedata, out procResult));
        }

        public System.Collections.Generic.List<UsmMsRetrieveFileReturnModel> UsmMsRetrieveFile(System.Guid? fileStreamId)
        {
            int procResult;
            return UsmMsRetrieveFile(fileStreamId, out procResult);
        }

        public System.Collections.Generic.List<UsmMsRetrieveFileReturnModel> UsmMsRetrieveFile(System.Guid? fileStreamId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UsmMsRetrieveFileReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UsmMsRetrieveFileReturnModel>> UsmMsRetrieveFileAsync(System.Guid? fileStreamId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UsmMsRetrieveFile(fileStreamId, out procResult));
        }

    }
}
// </auto-generated>
